{
    "uid": "4216707AK784EA4859S86BBE1FCA7990F36B",
    "isLoaded": true,
    "lastModificationTime": 0,
    "items": {
        "name": "UIManager",
        "type": "game_script",
        "order": 8,
        "content": "# ===================================================================\n#\n#   Script: UIManager\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\n\nclass Formula\n    ###*\n    * Encapsulates a UI formula. A formula can be used in UI layouts to define\n    * property-bindings or to implement a specific behavior.\n    *\n    * @module ui\n    * @class Formula\n    * @memberof ui\n    * @constructor\n    * @param {Function} f - The formula-function. Defines the logic of the formula.\n    * @param {Object} data - An optional data-object which can be accessed inside the formula-function.\n    * @param {string} event - An optional event-name to define when the formula should be executed.\n    ###\n    constructor: (f, data, event) ->\n        ###*\n        * Indicates if its the first time the formula is called.\n        * @property onInitialize\n        * @type boolean\n        ###\n        @onInitialize = yes\n        \n        ###*\n        * The formula-function.\n        * @property exec_\n        * @type Function\n        ###\n        @exec_ = f\n         \n        ###*\n        * An optional data-object which can bes accessed inside the formula-function.\n        * @property data\n        * @type Object\n        ###   \n        @data = data\n        \n        ###*\n        * An optional event-name to define when the formula should be executed.\n        * @property event\n        * @type string\n        ### \n        @event = event\n        \n        ###*\n        * An array of custom number-data which can be used for different purposes. The first element\n        * is also used in onChange method to store the old value and check against the new one to detect a change.\n        * @property numbers\n        * @type number[]\n        ### \n        @numbers = new Array(10)\n        @numbers[i] = 0 for i in [0..@numbers.length]\n        \n        ###*\n        * An array of custom string-data which can be used for different purposes. The first element\n        * is also used in onTextChange method to store the old value and check against the new one to detect a change.\n        * @property strings\n        * @type string[]\n        ###\n        @strings = new Array(10)\n        @strings[i] = \"\" for i in [0..@strings.length]\n        \n    \n    ###*\n    * The formula-function. Its a wrapper-function before the first-time call was made.\n    * @method exec\n    ###\n    exec: ->\n       @exec = @exec_\n       r = @exec_.apply(this, arguments)\n       @onInitialize = no\n       \n       return r\n       \n    ###*\n    * Checks if the specified number-value has changed since the last check. It uses\n    * the first entry of the numbers-array to store the value and check against the new one.\n    *\n    * @method onChange\n    * @param {number} numberValue - Number value to check.\n    ###    \n    onChange: (numberValue) ->\n        result = @numbers[0] != numberValue\n        @numbers[0] = numberValue\n        \n        return result\n     \n    ###*\n    * Checks if the specified text-value has changed since the last check. It uses\n    * the first entry of the strings-array to store the value and check against the new one.\n    *\n    * @method onTextChange\n    * @param {string} textValue - Text value to check.\n    ###     \n    onTextChange: (textValue) ->\n        result = @strings[0] != textValue\n        @strings[0] = textValue\n        \n        return result\n        \nui.Formula = Formula\n\nclass Space\n    ###*\n    * Describes a space inside or around something like a margin or padding.\n    *\n    * @module ui\n    * @class Space\n    * @memberof ui\n    * @constructor\n    * @param {number} left - Space at the left in pixels.\n    * @param {number} top - Space at the top in pixels.\n    * @param {number} right - Space at the right in pixels.\n    * @param {number} bottom - Space at the bottom in pixels.\n    ###\n    constructor: (left, top, right, bottom) ->\n        ###*\n        * Space at the left in pixels.\n        * @property left\n        * @type number\n        ###\n        @left = left\n        \n        ###*\n        * Space at the top in pixels.\n        * @property top\n        * @type number\n        ###\n        @top = top\n        \n        ###*\n        * Space at the right in pixels.\n        * @property right\n        * @type number\n        ###\n        @right = right\n        \n        ###*\n        * Space at the bottom in pixels.\n        * @property bottom\n        * @type number\n        ###\n        @bottom = bottom\n      \n    ###*\n    * Sets the coordinates of the space by copying them from a specified space.\n    *\n    * @method setFromObject\n    * @param {Object} space - A space to copy.\n    ###   \n    setFromObject: (space) ->\n        @left = space.left\n        @top = space.top\n        @right = space.right\n        @bottom = space.bottom\n      \n    ###*\n    * Sets the coordinates of the space.\n    *\n    * @method set\n    * @param {number} left - Space at the left in pixels.\n    * @param {number} top - Space at the top in pixels.\n    * @param {number} right - Space at the right in pixels.\n    * @param {number} bottom - Space at the bottom in pixels.\n    ###    \n    set: (left, top, right, bottom) ->\n        @left = left\n        @top = top\n        @right = right\n        @bottom = bottom\n    \n    ###*\n    * Creates a new space object from an array of coordinates.\n    *\n    * @method fromArray\n    * @static\n    * @param {number[]} array - An array of coordinates (left, top right, bottom).\n    ###    \n    @fromArray: (array) -> new ui.Space(array[0], array[1], array[2], array[3])\n        \nui.Space = Space\n\nclass Style\n    ###*\n    * A UI style can applied to a UI object to modify it properties like color, image, etc. to give a certain \"style\" to it.\n    *\n    * @module ui\n    * @class Style\n    * @memberof ui\n    * @constructor\n    * @param {Object} descriptor - A style-descriptor to initialize the style from.\n    * @param {number} id - A unique numeric ID to access the style through UIManager.stylesById collection.\n    * @param {number} selector - A selector ID which controls under which conditions the styles will be applied.\n    ###\n    constructor: (descriptor, id, selector) ->\n        ###*\n        * ID number to quickly access this style and link to this style.\n        * @property id\n        * @type number\n        ###\n        @id = id\n        \n        ###*\n        * Style-ID of target object. This style will only be applied on UI objects with that style ID which are\n        * children of UI objects where this style is applied.\n        * @property target\n        * @type number\n        ###\n        @target = -1\n        \n        ###*\n        * Selector-ID which controls under which conditions the style becomes active.\n        * @property selector\n        * @type number\n        ###\n        @selector = selector\n        \n        ###*\n        * The font used for the text-display.\n        * @default null\n        * @property font\n        * @type gs.Font\n        ###\n        @font = null\n        \n        ###*\n        * The UI object's image used for visual presentation.\n        * @property image\n        * @type string\n        ###\n        @image = null\n        \n        ###*\n        * The UI object's animations used for visual presentation.\n        * @default null\n        * @property animations\n        * @type Object[]\n        ###\n        @animations = null\n        \n        ###*\n        * The UI object's color.\n        * @property color\n        * @type gs.Color\n        ###\n        @color = null\n        \n        ###*\n        * The UI object's tone.\n        * @property tone\n        * @type gs.Tone\n        ###\n        @tone = null\n        \n        ###*\n        * The UI object's anchor-point. For example: An anchor-point with 0,0 places the object with its top-left corner\n        * at its position but with an 0.5, 0.5 anchor-point the object is placed with its center. An anchor-point of 1,1\n        * places the object with its lower-right corner.\n        * @property anchor\n        * @type gs.Point\n        ###\n        @anchor = null\n        \n        ###*\n        * The UI object's zoom-setting for x and y axis.\n        * @default new gs.Point(1.0, 1.0)\n        * @property zoom\n        * @type gs.Point\n        ###\n        @zoom = null\n        \n        ###*\n        * The UI object's margin. The margin defines an extra space around the UI object. \n        * The default is { left: 0, top: 0, right: 0, bottom: 0 }.\n        * @property margin\n        * @type Object\n        ###\n        @margin = null\n        \n        ###*\n        * The UI object's padding. The default is { left: 0, top: 0, right: 0, bottom: 0 }.\n        * @property padding\n        * @type Object\n        ###\n        @padding = null\n        \n        ###*\n        * The UI object's mask for masking-effects.\n        * @property mask\n        * @type gs.Mask\n        ###\n        @mask = null\n        \n        ###*\n        * The UI object's alignment.\n        * @property alignment\n        * @type ui.Alignment\n        ###\n        @alignment = -1\n        \n        ###*\n        * The UI object's opacity to control transparency. For example: 0 = Transparent, 255 = Opaque, 128 = Semi-Transparent.\n        * @property opacity\n        * @type number\n        ###\n        @opacity = -1\n        \n        ###*\n        * The object's clip-rect for visual presentation.\n        * @default null\n        * @property clipRect\n        * @type gs.Rect\n        * @protected\n        ###\n        @clipRect = null\n        \n        ###*\n        * The corner-size of the frame.\n        * @property frameCornerSize\n        * @type number\n        ###\n        @frameCornerSize = -1\n        \n        ###*\n        * The thickness of the frame.\n        * @property frameThickness\n        * @type number\n        ###\n        @frameThickness = -1\n        \n        ###*\n        * The looping of the image.\n        * @property looping\n        * @type ui.Orientation\n        ###\n        @looping = null\n        \n        ###*\n        * The object's z-index controls rendering-order/image-overlapping. An object with a smaller z-index is rendered\n        * before an object with a larger index. For example: To make sure a game object is always on top of the screen, it\n        * should have the largest z-index of all game objects.\n        * @property zIndex\n        * @type number\n        ###\n        @zIndex = -1\n        \n        ###*\n        * The object's alignment on x-axis. Needs to be supported by layout.\n        * @property alignmentX\n        * @type number\n        ###\n        @alignmentX = -1\n        \n        ###*\n        * The object's alignment on y-axis. Needs to be supported by layout.\n        * @property alignmentY\n        * @type number\n        ###\n        @alignmentY = -1\n        \n        ###*\n        * The object's resize behavior.\n        * @property resizable\n        * @type boolean\n        ###\n        @resizable = null\n        \n        ###*\n        * The original style descriptor.\n        * @property descriptor\n        * @type Object\n        ###\n        @descriptor = descriptor\n        \n        if descriptor\n            @setFromDescriptor(descriptor)\n\n    ###*\n    * Initializes the style from a style-descriptor.\n    *\n    * @method setFromDescriptor\n    * @param {Object} descriptor - The style-descriptor.\n    ### \n    setFromDescriptor: (descriptor) ->\n        @descriptor = descriptor\n        @image = descriptor.image\n        @color = gs.Color.fromArray(descriptor.color) if descriptor.color\n        @tone = gs.Tone.fromArray(descriptor.tone) if descriptor.tone\n        @anchor = new gs.Point(descriptor.anchor[0], descriptor.anchor[1]) if descriptor.anchor\n        @zoom = new gs.Point(descriptor.zoom[0], descriptor.zoom[1]) if descriptor.zoom\n        \n        if descriptor.font\n            @setupFont(descriptor)\n            \n        if descriptor.clipRect\n            @clipRect = gs.Rect.fromArray(descriptor.clipRect)\n            \n        @opacity = descriptor.opacity if descriptor.opacity >= 0\n        @alignment = descriptor.alignment if descriptor.alignment >= 0\n        @margin = ui.Space.fromArray(descriptor.margin) if descriptor.margin\n        @padding = ui.Space.fromArray(descriptor.padding) if descriptor.padding\n        @animations = descriptor.animations\n        @frameCornerSize = descriptor.frameCornerSize if descriptor.frameCornerSize\n        @frameThickness = descriptor.frameThickness if descriptor.frameThickness\n        @frame = descriptor.frame if descriptor.frame\n        @looping = descriptor.looping if descriptor.looping\n        @resizable = descriptor.resizable if descriptor.resizable?\n        @zIndex = descriptor.zIndex if descriptor.zIndex\n        @alignmentX = ui.UIManager.alignments[descriptor.alignmentX] if descriptor.alignmentX\n        @alignmentY = ui.UIManager.alignments[descriptor.alignmentY] if descriptor.alignmentY\n        \n    set: (style) ->\n        @image = style.image\n        @color.setFromObject(style.color)\n        @tone.setFromObject(style.tone)\n        @anchor.set(style.anchor.x, style.anchor.y)\n        @zoom.set(style.zoom.x, style.zoom.y)\n        \n        if style.font\n            if !@font then @font = new gs.Font(style.font.name, style.font.size)\n            @font.set(style.font)\n            \n        if style.clipRect\n            if !@clipRect then @clipRect = new gs.Rect()\n            @clipRect.setFromObject(style.clipRect)\n            \n        @opacity = style.opacitz\n        @alignment = style.alignment\n        @margin.setFromObject(style.margin)\n        @padding.setFromObject(style.padding)\n        \n    ###*\n    * Initializes font-data from a style-descriptor.\n    *\n    * @method setupFont\n    * @param {Object} descriptor - The style-descriptor.\n    * @protected\n    ### \n    setupFont: (descriptor) ->\n        if descriptor.font\n            if !@font\n                @font = new Font(descriptor.font.name, descriptor.font.size ? 0)\n            else\n                @font.name = descriptor.font.name\n                @font.size = descriptor.font.size ? 0\n                \n            @font.bold = descriptor.font.bold ? @font.bold\n            @font.italic = descriptor.font.italic ? @font.italic\n            @font.smallCaps = descriptor.font.smallCaps ? @font.smallCaps\n            @font.underline = descriptor.font.underline ? @font.underline\n            @font.strikeThrough = descriptor.font.strikeThrough ? @font.strikeThrough\n            \n            if descriptor.font.color?\n                @font.color.setFromArray(descriptor.font.color)\n            \n            if descriptor.font.border?\n                @font.border = descriptor.font.border ? no\n                @font.borderSize = descriptor.font.borderSize ? 4\n                @font.borderColor.set(0, 0, 0, 255)\n                \n            if descriptor.font.outline?\n                @font.border = descriptor.font.outline ? no\n                @font.borderSize = descriptor.font.outline.size ? 4\n                \n                if descriptor.font.outline.color?\n                    @font.borderColor.setFromArray(descriptor.font.outline.color)\n                else\n                    @font.borderColor.set(0, 0, 0, 255)\n    \n    ###*\n    * Applies the style to a UI object.\n    *\n    * @method apply\n    * @param {ui.Object_UIElement} object - The UI object where the style should be applied to.\n    ###                \n    apply: (object) ->\n        if not object.activeStyles.contains(this)\n            object.activeStyles.push(this)\n            if @font then object.font?.set(@font)\n            if @color then object.color.set(@color)\n            if @tone then object.tone?.set(@tone)\n            if @image then object.image = @image\n            if @anchor then object.anchor.set(@anchor.x, @anchor.y)\n            if @zoom then object.zoom.set(@zoom.x, @zoom.y)\n            if @padding then object.padding.setFromObject(@padding)\n            if @margin then object.margin.setFromObject(@margin)\n            if @opacity >= 0 then object.opacity = @opacity\n            if @alignment >= 0 then object.alignment = @alignment\n            if @frameThickness >= 0 then object.frameThickness = @frameThickness\n            if @frameCornerSize >= 0 then object.frameCornerSize = @frameCornerSize\n            if @mask then object.mask.set(@mask)\n            if @zIndex >= 0 then object.zIndex = @zIndex\n            if @alignmentX >= 0 then object.alignmentX = @alignmentX\n            if @alignmentY >= 0 then object.alignmentY = @alignmentY\n            if @resizable? then object.resizable = @resizable\n            \n            @applyLooping(object)\n            @applyAnimations(object)\n     \n    ###*\n    * Applies the looping-data of the style to a UI object.\n    *\n    * @method applyLooping\n    * @param {ui.Object_UIElement} object - The UI object where the looping-data should be applied to.\n    * @protected\n    ###     \n    applyLooping: (object) ->\n        if @looping\n            if !object.visual.looping\n                object.visual.dispose()\n                object.removeComponent(object.visual)\n                object.visual = new gs.Component_TilingSprite()\n                object.addComponent(object.visual)\n            \n            object.visual.looping.vertical = @looping.vertical\n            object.visual.looping.horizontal = @looping.horizontal\n     \n    ###*\n    * Applies the animation-data of the style to a UI object. This automatically adds an animation-handler\n    * component(ui.Component_AnimationHandler) with the id \"animationHandler\" to the UI object if not already exists.\n    *\n    * @method applyAnimations\n    * @param {ui.Object_UIElement} object - The UI object where the animation-data should be applied to.\n    * @protected\n    ###        \n    applyAnimations: (object) ->\n        if @animations\n            object.animations = Object.deepCopy(@animations)\n            if !object.findComponentById(\"animationHandler\")\n                object.animationExecutor = new ui.Component_AnimationExecutor()\n                object.addComponent(new ui.Component_AnimationHandler(), \"animationHandler\")\n                object.addComponent(object.animationExecutor, \"animationExecutor\")\n                \n      \n    ###*\n    * Reverts the changes from a UI object made by this style. However, this resets all styleable properties\n    * were set by this style. So it is necessary to apply all other styles again, but that is already handles in\n    * ui.Component_UIBehavior.\n    *\n    * @method revert\n    * @param {ui.Object_UIElement} object - The UI object where the style should be reverted.\n    ###             \n    revert: (object) ->\n        activeStyles = object.activeStyles\n        if object.activeStyles.contains(this)\n            object.activeStyles.remove(this)\n            \n            if @font then object.font.set(gs.Fonts.TEXT);               (if s.font then object.font.set(s.font); break) for s in activeStyles by -1\n            if @color then object.color.set(Color.WHITE);               (if s.color then object.color.set(s.color); break) for s in activeStyles by -1\n            if @tone then object.tone?.set(0, 0, 0, 0);                 (if s.tone then object.tone?.set(s.tone); break) for s in activeStyles by -1\n            if @image then object.image = null;                         (if s.image then object.image = s.image; break) for s in activeStyles by -1\n            if @anchor then object.anchor.set(0, 0);                    (if s.anchor then object.anchor.setFromObject(s.anchor); break) for s in activeStyles by -1\n            if @zoom then object.zoom.set(1.0, 1.0);                    (if s.zoom then object.zoom.setFromObject(s.zoom); break) for s in activeStyles by -1\n            if @padding then object.padding.set(0, 0, 0, 0);            (if s.padding then object.padding.setFromObject(s.padding); break) for s in activeStyles by -1\n            if @margin then object.margin.set(0, 0, 0, 0);              (if s.margin then object.margin.setFromObject(s.margin); break) for s in activeStyles by -1\n            if @opacity >= 0 then object.opacity = 255;                 (if s.opacity >= 0 then object.opacity = s.opacity; break) for s in activeStyles by -1\n            if @alignment >= 0 then object.alignment = 0;               (if s.alignment >= 0 then object.alignment = s.alignment; break) for s in activeStyles by -1\n            if @frameCornerSize >= 0 then object.frameCornerSize = 16;  (if s.frameCornerSize >= 0 then object.frameCornerSize = s.frameCornerSize; break) for s in activeStyles by -1\n            if @frameThickness >= 0 then object.frameThickness = 16;    (if s.frameThickness >= 0 then object.frameThickness = s.frameThickness; break) for s in activeStyles by -1\n            if @mask then object.mask.set(null);                        (if s.mask then object.mask.set(s.font); break) for s in activeStyles by -1\n            if @zIndex >= 0 then object.zIndex = 0;                     (if s.zIndex >= 0 then object.zIndex = s.zIndex; break) for s in activeStyles by -1\n            if @alignmentX >= 0 then object.alignmentX = 0;             (if s.alignmentX >= 0 then object.alignmentX = s.alignmentX; break) for s in activeStyles by -1\n            if @alignmentY >= 0 then object.alignmentY = 0;             (if s.alignmentY >= 0 then object.alignmentY = s.alignmentY; break) for s in activeStyles by -1\n            if @resizable? then object.resizable = no;                  (if s.resizable? then object.resizable = s.resizable; break) for s in activeStyles by -1\n            \n            @revertAnimations(object)\n            @revertLooping(object)\n                    \n    ###*\n    * Reverts the animation-data changes applied to a UI object by this style.\n    *\n    * @method revertAnimations\n    * @param {ui.Object_UIElement} object - The UI object where the animation-data changes should be reverted.\n    ###                 \n    revertAnimations: (object) ->\n        activeStyles = object.activeStyles\n        if @animations\n            object.animations = null;               \n            for s in activeStyles by -1\n                if s.animations\n                    object.animations = Object.deepCopy(s.animations)\n                    if !object.findComponentById(\"animationHandler\")\n                        object.addComponent(new ui.Component_AnimationHandler(), \"animationHandler\")\n        \n    ###*\n    * Reverts the looping-data changes applied to a UI object by this style.\n    *\n    * @method revertLooping\n    * @param {ui.Object_UIElement} object - The UI object where the looping-data changes should be reverted.\n    ###                 \n    revertLooping: (object) ->\n        activeStyles = object.activeStyles\n        if @looping\n            object.visual.looping.vertical = no\n            object.visual.looping.horizontal = no\n            for s in activeStyles by -1\n                if s.looping\n                    if !object.visual.looping\n                        object.visual.dispose()\n                        object.removeComponent(object.visual)\n                        object.visual = new gs.Component_TilingSprite()\n                        object.addComponent(object.visual)\n                    \n                    object.visual.looping.vertical = s.looping.vertical\n                    object.visual.looping.horizontal = s.looping.horizontal\n            \nui.Style = Style\n\nclass UIManager\n    ###*\n    * Handles the creation of In Game UI elements. For more information about\n    * In-Game UI see help file.\n    *\n    * @module ui\n    * @class UIManager\n    * @memberof ui\n    * @constructor\n    ###\n    constructor: ->\n        ###*\n        * Stores all registered UI layouts by name/id.\n        * @property layouts\n        * @type Object\n        ###\n        @layouts = {}\n        \n        ###*\n        * Stores all registered UI styles by name/id.\n        * @property styles\n        * @type Object\n        ###\n        @styles = {}\n        \n        ###*\n        * Stores all UI styles by number id.\n        * @property stylesById\n        * @type ui.Style[]\n        ###\n        @stylesById = new Array()\n        \n        ###*\n        * Stores all UI styles by style-name.\n        * @property stylesByName\n        * @type Object\n        ###\n        @stylesByName = {}\n        \n        ###*\n        * Stores all registered custom UI types/templates by name/id.\n        * @property customTypes\n        * @type Object\n        ###\n        @customTypes = {}\n        \n        ###*\n        * Stores all registered UI controllers by name/id.\n        * @property customTypes\n        * @type Object\n        ###\n        @controllers = {}\n        \n        ###*\n        * Stores all registered UI data sources by name/id.\n        * @property customTypes\n        * @type Object\n        ###\n        @dataSources = {}\n        \n        ###*\n        * Mapping to table to map alignment names to number values.\n        * @property alignments\n        * @type Object\n        * @protected\n        ###\n        @alignments = { \"left\": 0, \"top\": 0, \"center\": 1, \"bottom\": 2, \"right\": 2, \"0\": 0, \"1\": 1, \"2\": 2 }\n        \n        ###*\n        * Mapping to table to map blend-mode names to number values.\n        * @property blendModes\n        * @type Object\n        * @protected\n        ###\n        @blendModes = { \"normal\": 0, \"add\": 1, \"sub\": 2 }\n        \n        ###*\n        * Mapping to table to map selector names to number values.\n        * @property selectors\n        * @type Object\n        ###\n        @selectors = { normal: 0, hover: 1, selected: 2, enabled: 3, focused: 4 }\n        @defaultPlaceholderParams = {}\n    \n    ###*\n    * Sets up UI Manager, optimizes styles, etc.\n    *\n    * @method setup\n    ###\n    setup: ->\n        @setupStyles()\n        \n    ###*\n    * Sets up the UI styles by wrapping them into ui.Style objects and optimizing the access.\n    *\n    * @method setupStyles\n    * @protected\n    ###\n    setupStyles: ->\n        id = 0\n        selectorMap = @selectors\n        for k of @styles\n            subs = k.split(\" \")\n            selector = subs[0].split(\":\")\n            \n            if selectorMap[selector[1]]\n                @stylesById[id] = new ui.Style(@styles[k], id, selectorMap[selector[1]])\n            else\n                @stylesById[id] = new ui.Style(@styles[k], id, 0)\n            \n            if !@stylesByName[selector[0]]\n                @stylesByName[selector[0]] = []\n                \n            @stylesByName[selector[0]].push(@stylesById[id])\n            @styles[k] = @stylesById[id]\n            \n            id++\n        \n        for k of @styles\n            subs = k.split(\" \")\n            if subs.length > 1\n                @stylesByName[subs[1]].push(@styles[k])\n                @styles[k].target = @styles[k.split(\":\")[0]]?.id\n                #@styles[subs[1]].target = @styles[k].id\n                #@styles[k].target = @styles[subs[1]].id\n            \n        return null\n        \n    ###*\n    * Executes all placeholder formulas in the specified descriptor. The descriptor will be changed\n    * and placeholder formulas are replaced with their evaluated result value.\n    *\n    * @method executePlaceholderFormulas\n    * @param {Object} descriptor - The descriptor.\n    * @param {Object} params - Object containing the placeholder params.\n    * @protected\n    ###    \n    executePlaceholderFormulas: (descriptor, id, params) ->\n        return if not descriptor?\n        keys = Object.keys(descriptor)\n            \n        for k in keys\n            v = descriptor[k]\n            if v?\n                if v instanceof Array\n                    for i, c in v\n                        if i?\n                            if typeof i == \"object\"\n                                @executePlaceholderFormulas(i, id, params)\n                            else if c != \"exec\" and typeof i == \"function\"\n                                window.p = params ||  @defaultPlaceholderParams\n                                window.d = descriptor\n                                v[c] = i()\n                else if typeof v == \"object\"\n                    @executePlaceholderFormulas(v, id, params)\n                else if k != \"exec_\" and typeof v == \"function\"\n                    window.p = params || @defaultPlaceholderParams\n                    window.d = descriptor\n                    descriptor[k] = v()\n        return null\n\n    ###*\n    * Creates a calculation for a specified expression.\n    *\n    * @method createCalcFunction\n    * @param {String} expression - The expression to create a calculation function for.\n    * @return {Function} The calculation function.\n    * @protected\n    ###               \n    createCalcFunction: (expression) ->\n        expression = expression.replace(/([0-9]+)%/gm, \"($1 / 100 * v)\")\n        return eval(\"(function(v){ return \" + expression + \"})\")\n    \n    ###*\n    * Creates an object from the specified object type. The type has the format\n    * <namespace>.<typename> like vn.Component_Hotspot.\n    *\n    * @method createObject\n    * @param {String} type - The type name.\n    * @return {Object} The created object.\n    * @protected\n    ###             \n    createObject: (type) ->\n        subs = type.split(\".\")\n        return new window[subs[0]][subs[1]]()\n      \n    ###*\n    * Creates an UI object from a specified UI descriptor.\n    *\n    * @method createFromDescriptor\n    * @param {Object} descriptor - The UI object descriptor.\n    * @param {gs.Object_UIElement} parent - The UI parent object. (A layout for example).\n    * @return {gs.Object_UIElement} The created UI object.\n    ###   \n    createFromDescriptor: (descriptor, parent) ->\n        control = null\n        \n        for k of @controllers\n            if @controllers[k].type?\n                @controllers[k] = @createObject(@controllers[k].type)\n            \n        @_createFromDescriptor(descriptor, parent)\n    \n    \n    ###*\n    * Creates an image button UI object.\n    *\n    * @method createImageButton\n    * @param {Object} descriptor - The UI object descriptor.\n    * @return {gs.Object_UIElement} The created image button UI object.\n    ###  \n    createImageButton: (descriptor) ->\n        control = new ui.Object_Hotspot(descriptor.image, descriptor.imageHandling) \n                \n        control.behavior.sound = descriptor.sound\n        control.behavior.sounds = descriptor.sounds\n        control.image = descriptor.image\n        control.images = descriptor.images\n        if descriptor.imageFolder?\n            control.imageFolder = descriptor.imageFolder\n            \n        if descriptor.looping?\n            control.visual.dispose()\n            control.removeComponent(control.visual)\n            control.visual = new gs.Component_TilingSprite()\n            control.addComponent(control.visual)\n            \n            control.visual.looping.vertical = descriptor.looping.vertical\n            control.visual.looping.horizontal = descriptor.looping.horizontal\n        if descriptor.color?\n            control.color = Color.fromArray(descriptor.color)\n    \n        return control\n    \n    ###*\n    * Creates an image UI object.\n    *\n    * @method createImage\n    * @param {Object} descriptor - The UI object descriptor.\n    * @return {gs.Object_UIElement} The created image button UI object.\n    ###     \n    createImage: (descriptor) ->\n        control = new ui.Object_Image(descriptor.image, descriptor.imageHandling) \n                \n        if descriptor.imageFolder?\n            control.imageFolder = descriptor.imageFolder\n            \n        if descriptor.looping?\n            control.visual.dispose()\n            control.removeComponent(control.visual)\n            control.visual = new gs.Component_TilingSprite()\n            control.addComponent(control.visual)\n            \n            control.visual.looping.vertical = descriptor.looping.vertical\n            control.visual.looping.horizontal = descriptor.looping.horizontal\n        if descriptor.color?\n            control.color = Color.fromArray(descriptor.color)\n                    \n        return control\n    \n    ###*\n    * Creates an image map UI object.\n    *\n    * @method createImageMap\n    * @param {Object} descriptor - The UI object descriptor.\n    * @return {gs.Object_UIElement} The created image button UI object.\n    ###        \n    createImageMap: (descriptor) ->\n        control = new ui.Object_ImageMap()\n        control.hotspots = (descriptor.hotspots||[]).select (h) -> \n            { x: h.rect[0], y: h.rect[1], size: { width: h.rect[2], height: h.rect[3] }, data: { action: 3, actions: h.actions } }\n        control.images = descriptor.images\n        control.insertComponent(new ui.Component_ActionHandler(), 1, \"actionHandler\")\n        control.target = SceneManager.scene.behavior\n        \n        return control\n    \n    ###*\n    * Creates a video UI object.\n    *\n    * @method createVideo\n    * @param {Object} descriptor - The UI object descriptor.\n    * @return {gs.Object_UIElement} The created image button UI object.\n    ###    \n    createVideo: (descriptor) ->\n        control = new ui.Object_Video()\n        control.video = descriptor.video\n        control.loop = descriptor.loop ? yes\n        \n        return control\n    \n    \n    ###*\n    * Creates a panel UI object.\n    *\n    * @method createPanel\n    * @param {Object} descriptor - The UI object descriptor.\n    * @return {gs.Object_UIElement} The created image button UI object.\n    ###       \n    createPanel: (descriptor) ->\n        control = new ui.Object_Panel()\n        control.modal = descriptor.modal ? no\n        if descriptor.color?\n            control.color = Color.fromArray(descriptor.color)\n            \n        return control\n    \n    ###*\n    * Creates a frame UI object.\n    *\n    * @method createFrame\n    * @param {Object} descriptor - The UI object descriptor.\n    * @return {gs.Object_UIElement} The created image button UI object.\n    ###           \n    createFrame: (descriptor) ->\n        control = new ui.Object_Frame(descriptor.frameSkin)\n        control.frameThickness = descriptor.frameThickness || 16\n        control.frameCornerSize = descriptor.frameCornerSize || 16\n        control.image = descriptor.image\n        control.images = descriptor.images\n        \n        return control\n    \n    ###*\n    * Creates a three-part image UI object.\n    *\n    * @method createThreePartImage\n    * @param {Object} descriptor - The UI object descriptor.\n    * @return {gs.Object_UIElement} The created image button UI object.\n    ###     \n    createThreePartImage: (descriptor) ->\n        control = new ui.Object_ThreePartImage(descriptor.frameSkin)\n        control.firstPartSize = descriptor.firstPartSize || 16\n        control.middlePartSize = descriptor.middlePartSize || 1\n        control.lastPartSize = descriptor.lastPartSize || 16\n        control.image = descriptor.image\n        control.images = descriptor.images\n        \n        return control\n     \n    ###*\n    * Creates a text UI object.\n    *\n    * @method createText\n    * @param {Object} descriptor - The UI object descriptor.\n    * @return {gs.Object_UIElement} The created image button UI object.\n    ###     \n    createText: (descriptor) ->\n        control = new ui.Object_Text()\n        control.text = lcs(descriptor.text)\n        control.sizeToFit = descriptor.sizeToFit\n        control.formatting = descriptor.formatting\n        control.wordWrap = descriptor.wordWrap ? no\n        control.behavior.format = descriptor.format\n        if descriptor.textPadding\n            control.behavior.padding = ui.Space.fromArray(descriptor.textPadding)\n        if descriptor.resolvePlaceholders?\n            control.resolvePlaceholders = descriptor.resolvePlaceholders\n        if descriptor.color?\n            control.color = Color.fromArray(descriptor.color)\n            \n        return control\n    \n    ###*\n    * Creates a free-layout UI object.\n    *\n    * @method createFreeLayout\n    * @param {Object} descriptor - The UI object descriptor.\n    * @return {gs.Object_UIElement} The created image button UI object.\n    ### \n    createFreeLayout: (descriptor) ->\n        if descriptor.frame?\n            control = new ui.Object_FreeLayout(descriptor.frame[0] || 0, descriptor.frame[1] || 0, descriptor.frame[2] || 1, descriptor.frame[3] || 1)\n        else\n            control = new ui.Object_FreeLayout(0, 0, 1, 1)\n        control.sizeToFit = descriptor.sizeToFit\n        \n        return control\n    \n    ###*\n    * Creates a stack-layout UI object.\n    *\n    * @method createStackLayout\n    * @param {Object} descriptor - The UI object descriptor.\n    * @return {gs.Object_UIElement} The created image button UI object.\n    ###     \n    createStackLayout: (descriptor) ->\n        if descriptor.frame?\n            control = new ui.Object_StackLayout(descriptor.frame[0] || 0, descriptor.frame[1] || 0, descriptor.frame[2] || 1, descriptor.frame[3] || 1, descriptor.orientation)\n        else\n            control = new ui.Object_StackLayout(0, 0, 1, 1, descriptor.orientation)\n        control.sizeToFit = descriptor.sizeToFit\n        \n        return control\n    \n    ###*\n    * Creates a spread-layout UI object.\n    *\n    * @method createSpreadLayout\n    * @param {Object} descriptor - The UI object descriptor.\n    * @return {gs.Object_UIElement} The created image button UI object.\n    ###     \n    createSpreadLayout: (descriptor) ->\n        if descriptor.frame?\n            control = new ui.Object_SpreadLayout(descriptor.frame[0] || 0, descriptor.frame[1] || 0, descriptor.frame[2] || 1, descriptor.frame[3] || 1, descriptor.orientation)\n        else\n            control = new ui.Object_SpreadLayout(0, 0, 1, 1, descriptor.orientation)\n            \n        return control\n     \n    ###*\n    * Creates a grid-layout UI object.\n    *\n    * @method createGridLayout\n    * @param {Object} descriptor - The UI object descriptor.\n    * @return {gs.Object_UIElement} The created image button UI object.\n    ###    \n    createGridLayout: (descriptor) ->\n        if descriptor.frame?\n            control = new ui.Object_GridLayout(descriptor.frame[0], descriptor.frame[1], descriptor.frame[2], descriptor.frame[3], descriptor.rows, descriptor.columns, descriptor.template)\n        else\n            control = new ui.Object_GridLayout(0, 0, 1, 1, descriptor.rows, descriptor.columns, descriptor.template)\n        control.cellSpacing = descriptor.cellSpacing || [0, 0, 0, 0]\n        control.sizeToFit = descriptor.sizeToFit\n        \n        return control\n     \n    ###*\n    * Creates a message UI object.\n    *\n    * @method createMessage\n    * @param {Object} descriptor - The UI object descriptor.\n    * @return {gs.Object_UIElement} The created image button UI object.\n    ###     \n    createMessage: (descriptor) ->\n        control = new ui.Object_Message() \n        \n        return control\n     \n    ###*\n    * Creates a data-grid UI object.\n    *\n    * @method createDataGrid\n    * @param {Object} descriptor - The UI object descriptor.\n    * @return {gs.Object_UIElement} The created image button UI object.\n    ###    \n    createDataGrid: (descriptor) ->\n        control = new ui.Object_DataGrid(descriptor)\n        \n        return control\n        \n    ###*\n    * Creates an UI object depending on the object-type of the specified UI descriptor.\n    *\n    * @method createControl\n    * @param {Object} descriptor - The UI object descriptor.\n    * @return {gs.Object_UIElement} The created UI object.\n    * @protected\n    ###  \n    createControl: (descriptor) ->\n        control = null\n        \n        switch descriptor.type\n            when \"ui.ImageButton\"\n                control = @createImageButton(descriptor)\n            when \"ui.Image\"\n                control = @createImage(descriptor)\n            when \"ui.ImageMap\"\n                control = @createImageMap(descriptor)\n            when \"ui.Video\"\n                control = @createVideo(descriptor)\n            when \"ui.Panel\"\n                control = @createPanel(descriptor)\n            when \"ui.Frame\"\n                control = @createFrame(descriptor)\n            when \"ui.ThreePartImage\"\n                control = @createThreePartImage(descriptor)\n            when \"ui.Text\"\n                control = @createText(descriptor)\n            when \"ui.Message\"\n                control = @createMessage(descriptor)\n            when \"ui.DataGrid\"\n                control = @createDataGrid(descriptor)\n            when \"ui.FreeLayout\"\n                control = @createFreeLayout(descriptor)\n            when \"ui.StackLayout\"\n                control = @createStackLayout(descriptor)\n            when \"ui.SpreadLayout\"\n                control = @createSpreadLayout(descriptor)\n            when \"ui.GridLayout\"\n                control = @createGridLayout(descriptor)\n                \n        return control\n    \n    \n    createLayoutRect: (frame, control) ->\n        if !control.layoutRect\n            control.layoutRect = new ui.LayoutRect()\n        control.layoutRect.set(0, 0, 0, 0)\n        \n        if frame?\n            if frame[0]?.length?\n                control.layoutRect.x = @createCalcFunction(frame[0])\n                control.dstRect.x = 0\n            else\n                control.dstRect.x = (descriptor.frame[0] ? control.dstRect.x)\n                \n            if frame[1]?.length?\n                control.layoutRect.y = @createCalcFunction(frame[1])\n                control.dstRect.y = 0\n            else\n                control.dstRect.y = (frame[1] ? control.dstRect.y)\n                \n            if frame[2]?.length?\n                control.layoutRect.width = @createCalcFunction(frame[2])\n                control.dstRect.width = 1\n            else\n                control.dstRect.width = (frame[2] ? control.dstRect.width)\n                \n            if frame[3]?.length?\n                control.layoutRect.height = @createCalcFunction(frame[3])\n                control.dstRect.height = 1\n            else\n                control.dstRect.height = (frame[3] ? control.dstRect.height)\n     \n    \n    ###*\n    * Adds the styles defined in an array of style-names to the specified control.\n    *\n    * @method addControlStyles\n    * @param {Object} control - The control to add the styles to.\n    * @param {string[]} styles - Array of style-names to add.\n    ###     \n    addControlStyles: (control, styles) ->\n        for styleName in styles\n            if @stylesByName[styleName]?\n                for style in @stylesByName[styleName]\n                    control.styles.push(style)\n                    if style.target == -1 and style.selector == 0\n                        style.apply(control)\n    ###*\n    * Creates an UI object from a specified UI descriptor. This method is called\n    * recursively for all child-descriptors.\n    *\n    * @method createControlFromDescriptor\n    * @param {Object} descriptor - The UI object descriptor.\n    * @param {gs.Object_UIElement} parent - The UI parent object. (A layout for example).\n    * @param {number} index - The index.\n    * @return {gs.Object_UIElement} The created UI object.\n    * @protected\n    ###        \n    createControlFromDescriptor: (descriptor, parent, index) ->\n        control = null\n        \n        if descriptor.style?\n            descriptor.styles = [descriptor.style]\n            delete descriptor.style\n            \n        descriptor = Object.deepCopy(descriptor)\n        @executePlaceholderFormulas(descriptor, descriptor.id, descriptor.params)\n            \n        control = @createControl(descriptor)\n        \n        if not control?\n            type = Object.deepCopy(@customTypes[descriptor.type])\n            \n            @executePlaceholderFormulas(type, descriptor.id, descriptor.params)\n       \n            typeName = type.type\n            customFields = type.customFields\n            bindings = type.bindings\n            formulas = type.formulas\n            actions = type.actions\n            if type.style?\n                type.styles = [type.style]\n                type.style = null\n                \n            Object.mixin(type, descriptor)\n            if customFields? then Object.mixin(type.customFields, customFields)\n            if bindings? and bindings != type.bindings then type.bindings = type.bindings.concat(bindings)\n            if formulas? and formulas != type.formulas then type.formulas = type.formulas.concat(formulas)\n            if actions? and actions != type.actions then type.actions = actions.concat(type.actions)\n            type.type = typeName\n            \n            return @createControlFromDescriptor(type, parent)\n        else if parent?\n            parent.addObject(control)\n            control.index = index\n        else\n            gs.ObjectManager.current.addObject(control)\n         \n        control.ui = new ui.Component_UIBehavior()\n        control.addComponent(control.ui)\n        \n                \n                    \n        control.params = descriptor.params\n        \n        if descriptor.updateBehavior == \"continuous\"\n            control.updateBehavior = ui.UpdateBehavior.CONTINUOUS\n            \n        if descriptor.inheritProperties\n            control.inheritProperties = yes\n            \n        if descriptor.font?\n            control.font = new Font(descriptor.font.name, descriptor.font.size)\n            control.font.bold = descriptor.font.bold ? control.font.bold\n            control.font.italic = descriptor.font.italic ? control.font.italic\n            control.font.smallCaps = descriptor.font.smallCaps ? control.font.smallCaps\n            control.font.underline = descriptor.font.underline ? control.font.underline\n            control.font.strikeThrough = descriptor.font.strikeThrough ? control.font.strikeThrough\n            \n            if descriptor.font.color?\n                control.font.color = Color.fromArray(descriptor.font.color)\n            if descriptor.font.border?\n                control.font.border = descriptor.font.border ? no\n                control.font.borderSize = descriptor.font.borderSize ? 4\n              #if descriptor.font.border.color\n            #        control.font.borderColor = Color.fromArray(descriptor.font.border.color)\n                control.font.borderColor = new Color(0, 0, 0)\n                \n            if descriptor.font.outline?\n                control.font.border = descriptor.font.outline ? no\n                control.font.borderSize = descriptor.font.outline.size ? 4\n                \n                if descriptor.font.outline.color?\n                    control.font.borderColor = Color.fromArray(descriptor.font.outline.color)\n                else\n                    control.font.borderColor = new Color(0, 0, 0)\n                        \n        if descriptor.components?\n            for c in descriptor.components\n                m = c.module || \"gs\"\n                component = new window[m][c.type](c.params)\n                control.addComponent(component, c.id)\n                control[c.id] = component\n                #component.setup?()\n         \n        control.focusable = descriptor.focusable ? control.focusable       \n        if descriptor.nextKeyObject\n            control.ui.nextKeyObjectId = descriptor.nextKeyObject\n        \n        if descriptor.initialFocus\n            control.ui.focus()\n            \n        actions = Object.deepCopy(if descriptor.action? then [descriptor.action] else descriptor.actions) \n        if actions?\n            for action in actions\n                if action?\n                    action.event = action.event ? \"onAccept\"\n                    if not action.target?\n                        target = if @controllers? then @controllers[descriptor.target] else controller\n                        action.target = target || SceneManager.scene.behavior\n            \n            control.actions = actions\n            \n            if(!control.findComponentById(\"actionHandler\"))\n                control.insertComponent(new ui.Component_ActionHandler(), 1, \"actionHandler\")\n        \n        if descriptor.id?\n            control.id = descriptor.id\n            gs.ObjectManager.current.setObjectById(control, control.id)\n            \n        control.descriptor = descriptor\n        control.layoutRect = new Rect()\n        control.layoutRect.set(0, 0, 0, 0)\n        if descriptor.frame?\n            if descriptor.frame[0]?.length?\n                control.layoutRect.x = @createCalcFunction(descriptor.frame[0])\n                control.dstRect.x = 0\n            else\n                control.dstRect.x = (descriptor.frame[0] ? control.dstRect.x)\n                \n            if descriptor.frame[1]?.length?\n                control.layoutRect.y = @createCalcFunction(descriptor.frame[1])\n                control.dstRect.y = 0\n            else\n                control.dstRect.y = (descriptor.frame[1] ? control.dstRect.y)\n                \n            if descriptor.frame[2]?.length?\n                control.layoutRect.width = @createCalcFunction(descriptor.frame[2])\n                control.dstRect.width = 1\n            else\n                control.dstRect.width = (descriptor.frame[2] ? control.dstRect.width)\n                \n            if descriptor.frame[3]?.length?\n                control.layoutRect.height = @createCalcFunction(descriptor.frame[3]) #parseInt(descriptor.frame[3].split(\"%\")[0])\n                control.dstRect.height = 1\n            else\n                control.dstRect.height = (descriptor.frame[3] ? control.dstRect.height)\n           \n        if descriptor.sizeToParent?\n            control.sizeToParent = descriptor.sizeToParent\n            \n        if descriptor.blendMode?\n            control.blendMode = @blendModes[descriptor.blendMode]\n            \n        if descriptor.anchor?\n            control.anchor.set(descriptor.anchor[0], descriptor.anchor[1])\n        \n\n        control.opacity = descriptor.opacity ? 255    \n        if descriptor.minimumSize?\n            control.minimumSize = { width: descriptor.minimumSize[0], height: descriptor.minimumSize[1] }\n            \n        if descriptor.resizable? then control.resizable = descriptor.resizable\n        if descriptor.scrollable? then control.scrollable = descriptor.scrollable \n        if descriptor.fixedSize? then control.fixedSize = descriptor.fixedSize\n        if descriptor.draggable?\n            control.draggable = descriptor.draggable\n            control.draggable.step = 0\n            if control.draggable.rect?\n                control.draggable.rect = Rect.fromArray(control.draggable.rect)\n            control.addComponent(new ui.Component_Draggable())\n        \n        if descriptor.bindings?\n            control.bindings = descriptor.bindings\n            control.insertComponent(new ui.Component_BindingHandler(), 0)\n            \n        if descriptor.formulas?\n            control.formulas = descriptor.formulas\n            control.insertComponent(new ui.Component_FormulaHandler(), 0)\n            \n        control.dataField = descriptor.dataField\n        control.enabled = descriptor.enabled ? yes\n        if descriptor.selectable? then control.selectable = descriptor.selectable\n        if descriptor.group? \n            control.group = descriptor.group\n            gs.ObjectManager.current.addToGroup(control, control.group)\n        \n        if descriptor.customFields?\n            control.customFields = Object.deepCopy(descriptor.customFields)\n            \n        if descriptor.margin?\n            control.margin.left = descriptor.margin[0]\n            control.margin.top = descriptor.margin[1]\n            control.margin.right = descriptor.margin[2]\n            control.margin.bottom = descriptor.margin[3]\n            \n        if descriptor.padding?\n            control.padding.left = descriptor.padding[0]\n            control.padding.top = descriptor.padding[1]\n            control.padding.right = descriptor.padding[2]\n            control.padding.bottom = descriptor.padding[3]\n            \n        if descriptor.alignment?\n            control.alignment = @alignments[descriptor.alignment]\n            \n        control.alignmentY = @alignments[descriptor.alignmentY || 0]\n        control.alignmentX = @alignments[descriptor.alignmentX || 0]\n        control.zIndex = descriptor.zIndex || 0\n        control.order = descriptor.order || 0\n        control.chainOrder = (descriptor.chainOrder ? descriptor.zOrder) + (parent?.chainOrder || 0)\n        if descriptor.zoom?\n            control.zoom = x: descriptor.zoom[0] / 100, y: descriptor.zoom[1] / 100\n        #control.dataFields = dataFields\n        #control.controllers = @controllers\n        #control.controller = controller\n        \n        if descriptor.visible?\n            control.visible = descriptor.visible\n        if descriptor.clipRect\n            control.clipRect = new Rect(control.dstRect.x, control.dstRect.y, control.dstRect.width, control.dstRect.height)\n\n        if descriptor.styles?\n            @addControlStyles(control, descriptor.styles)\n            \n                    \n        if descriptor.template?\n            control.behavior.managementMode = ui.LayoutManagementMode.fromString(descriptor.managementMode)\n            data = ui.Component_FormulaHandler.fieldValue(control, control.dataField) #control.dataFields[control.dataField]\n            isNumber = typeof data == \"number\"\n            if data?\n                for i in [0...(data.length ? data)]\n                    if data[i]? or isNumber\n                        valid = yes\n                        if descriptor.dataFilter? and not isNumber\n                            valid = ui.Component_Handler.checkCondition(data[i], descriptor.dataFilter)\n                        if valid or isNumber\n                            child = @createControlFromDescriptor(descriptor.template, control, i)\n                            #child.dataFields = control.dataFields\n                            \n                            if data[i]?.dstRect\n                                child.dstRect = ui.UIElementRectangle.fromRect(child, data[i].dstRect)\n                            if (not child.clipRect?) and control.clipRect?\n                                child.clipRect = control.clipRect\n                            #child.parent = control\n                            control.addObject(child)\n                            child.index = i\n                            child.order = (data.length ? data) - i\n                            control.controls.push(child)\n                            \n        \n        if descriptor.controls and descriptor.controls.exec\n            controls = ui.Component_FormulaHandler.fieldValue(descriptor, descriptor.controls)\n        else\n            controls = descriptor.controls\n            \n        if controls?\n            for item, i in controls\n                childControl = @_createFromDescriptor(item, control, i)\n                if (not childControl.clipRect?) and control.clipRect?\n                    childControl.clipRect = control.clipRect\n                childControl.index = i\n                childControl.origin.x = control.origin.x + control.dstRect.x\n                childControl.origin.y = control.origin.y + control.dstRect.y\n                #childControl.parent = control\n                control.addObject(childControl)\n                control.controls.push(childControl)\n                \n        if control.styles and control.parentsByStyle\n            #for style in control.styles\n            \n            parent = control.parent\n            while parent\n                if parent.styles\n                    for style in parent.styles\n                        if !control.parentsByStyle[style.id]\n                            control.parentsByStyle[style.id] = []\n                        control.parentsByStyle[style.id].push(parent)\n                \n                #while parent\n                    #if parent.controlsByStyle\n                    #    if(!parent.controlsByStyle[style.id])\n                    #        parent.controlsByStyle[style.id] = []\n                    #    parent.controlsByStyle[style.id].push(control)\n                  #  if control.parentsByStyle\n                  #      if !control.parentsByStyle[style.id]\n                  #          control.parentsByStyle[style.id] = []\n                  #      control.parentsByStyle[style.id].push(parent)\n                parent = parent.parent\n                        \n        if descriptor.animations?\n            control.animations = Object.deepCopy(descriptor.animations)\n            control.animationExecutor = new ui.Component_AnimationExecutor()\n            control.addComponent(control.animationExecutor)\n            control.addComponent(new ui.Component_AnimationHandler())\n         \n        control.ui.updateStyle()\n        control.setup()\n        \n        return control\n        \n    ###*\n    * Creates an UI object from a specified UI descriptor.\n    *\n    * @method _createFromDescriptor\n    * @param {Object} descriptor - The UI object descriptor.\n    * @param {gs.Object_UIElement} parent - The UI parent object. (A layout for example).\n    * @return {gs.Object_UIElement} The created UI object.\n    * @protected \n    ###   \n    _createFromDescriptor: (descriptor, parent, index) ->     \n        control = @createControlFromDescriptor(descriptor, parent, index)\n        \n        if descriptor.controller?\n            controller = @controllers[descriptor.controller]\n            control.controller = controller\n            control.addComponent(controller)\n                \n        return control\n        \n    createLayoutFromDescriptor: (descriptor, parent, index) ->\n        @_createFromDescriptor(descriptor, parent, index)\n        \n                \n        \nGraphics.width = $PARAMS.resolution.width\nGraphics.height = $PARAMS.resolution.height\nui.UiFactory = new UIManager()\nui.UIManager = ui.UiFactory",
        "parentId": "C0268943K60B3A42B7SA6F1EDDCF2F642FD7",
        "folder": false,
        "compiledContent": "var Formula, Space, Style, UIManager;\n\nFormula = (function() {\n\n  /**\n  * Encapsulates a UI formula. A formula can be used in UI layouts to define\n  * property-bindings or to implement a specific behavior.\n  *\n  * @module ui\n  * @class Formula\n  * @memberof ui\n  * @constructor\n  * @param {Function} f - The formula-function. Defines the logic of the formula.\n  * @param {Object} data - An optional data-object which can be accessed inside the formula-function.\n  * @param {string} event - An optional event-name to define when the formula should be executed.\n   */\n  function Formula(f, data, event) {\n\n    /**\n    * Indicates if its the first time the formula is called.\n    * @property onInitialize\n    * @type boolean\n     */\n    var i, j, l, ref, ref1;\n    this.onInitialize = true;\n\n    /**\n    * The formula-function.\n    * @property exec_\n    * @type Function\n     */\n    this.exec_ = f;\n\n    /**\n    * An optional data-object which can bes accessed inside the formula-function.\n    * @property data\n    * @type Object\n     */\n    this.data = data;\n\n    /**\n    * An optional event-name to define when the formula should be executed.\n    * @property event\n    * @type string\n     */\n    this.event = event;\n\n    /**\n    * An array of custom number-data which can be used for different purposes. The first element\n    * is also used in onChange method to store the old value and check against the new one to detect a change.\n    * @property numbers\n    * @type number[]\n     */\n    this.numbers = new Array(10);\n    for (i = j = 0, ref = this.numbers.length; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {\n      this.numbers[i] = 0;\n    }\n\n    /**\n    * An array of custom string-data which can be used for different purposes. The first element\n    * is also used in onTextChange method to store the old value and check against the new one to detect a change.\n    * @property strings\n    * @type string[]\n     */\n    this.strings = new Array(10);\n    for (i = l = 0, ref1 = this.strings.length; 0 <= ref1 ? l <= ref1 : l >= ref1; i = 0 <= ref1 ? ++l : --l) {\n      this.strings[i] = \"\";\n    }\n  }\n\n\n  /**\n  * The formula-function. Its a wrapper-function before the first-time call was made.\n  * @method exec\n   */\n\n  Formula.prototype.exec = function() {\n    var r;\n    this.exec = this.exec_;\n    r = this.exec_.apply(this, arguments);\n    this.onInitialize = false;\n    return r;\n  };\n\n\n  /**\n  * Checks if the specified number-value has changed since the last check. It uses\n  * the first entry of the numbers-array to store the value and check against the new one.\n  *\n  * @method onChange\n  * @param {number} numberValue - Number value to check.\n   */\n\n  Formula.prototype.onChange = function(numberValue) {\n    var result;\n    result = this.numbers[0] !== numberValue;\n    this.numbers[0] = numberValue;\n    return result;\n  };\n\n\n  /**\n  * Checks if the specified text-value has changed since the last check. It uses\n  * the first entry of the strings-array to store the value and check against the new one.\n  *\n  * @method onTextChange\n  * @param {string} textValue - Text value to check.\n   */\n\n  Formula.prototype.onTextChange = function(textValue) {\n    var result;\n    result = this.strings[0] !== textValue;\n    this.strings[0] = textValue;\n    return result;\n  };\n\n  return Formula;\n\n})();\n\nui.Formula = Formula;\n\nSpace = (function() {\n\n  /**\n  * Describes a space inside or around something like a margin or padding.\n  *\n  * @module ui\n  * @class Space\n  * @memberof ui\n  * @constructor\n  * @param {number} left - Space at the left in pixels.\n  * @param {number} top - Space at the top in pixels.\n  * @param {number} right - Space at the right in pixels.\n  * @param {number} bottom - Space at the bottom in pixels.\n   */\n  function Space(left, top, right, bottom) {\n\n    /**\n    * Space at the left in pixels.\n    * @property left\n    * @type number\n     */\n    this.left = left;\n\n    /**\n    * Space at the top in pixels.\n    * @property top\n    * @type number\n     */\n    this.top = top;\n\n    /**\n    * Space at the right in pixels.\n    * @property right\n    * @type number\n     */\n    this.right = right;\n\n    /**\n    * Space at the bottom in pixels.\n    * @property bottom\n    * @type number\n     */\n    this.bottom = bottom;\n  }\n\n\n  /**\n  * Sets the coordinates of the space by copying them from a specified space.\n  *\n  * @method setFromObject\n  * @param {Object} space - A space to copy.\n   */\n\n  Space.prototype.setFromObject = function(space) {\n    this.left = space.left;\n    this.top = space.top;\n    this.right = space.right;\n    return this.bottom = space.bottom;\n  };\n\n\n  /**\n  * Sets the coordinates of the space.\n  *\n  * @method set\n  * @param {number} left - Space at the left in pixels.\n  * @param {number} top - Space at the top in pixels.\n  * @param {number} right - Space at the right in pixels.\n  * @param {number} bottom - Space at the bottom in pixels.\n   */\n\n  Space.prototype.set = function(left, top, right, bottom) {\n    this.left = left;\n    this.top = top;\n    this.right = right;\n    return this.bottom = bottom;\n  };\n\n\n  /**\n  * Creates a new space object from an array of coordinates.\n  *\n  * @method fromArray\n  * @static\n  * @param {number[]} array - An array of coordinates (left, top right, bottom).\n   */\n\n  Space.fromArray = function(array) {\n    return new ui.Space(array[0], array[1], array[2], array[3]);\n  };\n\n  return Space;\n\n})();\n\nui.Space = Space;\n\nStyle = (function() {\n\n  /**\n  * A UI style can applied to a UI object to modify it properties like color, image, etc. to give a certain \"style\" to it.\n  *\n  * @module ui\n  * @class Style\n  * @memberof ui\n  * @constructor\n  * @param {Object} descriptor - A style-descriptor to initialize the style from.\n  * @param {number} id - A unique numeric ID to access the style through UIManager.stylesById collection.\n  * @param {number} selector - A selector ID which controls under which conditions the styles will be applied.\n   */\n  function Style(descriptor, id, selector) {\n\n    /**\n    * ID number to quickly access this style and link to this style.\n    * @property id\n    * @type number\n     */\n    this.id = id;\n\n    /**\n    * Style-ID of target object. This style will only be applied on UI objects with that style ID which are\n    * children of UI objects where this style is applied.\n    * @property target\n    * @type number\n     */\n    this.target = -1;\n\n    /**\n    * Selector-ID which controls under which conditions the style becomes active.\n    * @property selector\n    * @type number\n     */\n    this.selector = selector;\n\n    /**\n    * The font used for the text-display.\n    * @default null\n    * @property font\n    * @type gs.Font\n     */\n    this.font = null;\n\n    /**\n    * The UI object's image used for visual presentation.\n    * @property image\n    * @type string\n     */\n    this.image = null;\n\n    /**\n    * The UI object's animations used for visual presentation.\n    * @default null\n    * @property animations\n    * @type Object[]\n     */\n    this.animations = null;\n\n    /**\n    * The UI object's color.\n    * @property color\n    * @type gs.Color\n     */\n    this.color = null;\n\n    /**\n    * The UI object's tone.\n    * @property tone\n    * @type gs.Tone\n     */\n    this.tone = null;\n\n    /**\n    * The UI object's anchor-point. For example: An anchor-point with 0,0 places the object with its top-left corner\n    * at its position but with an 0.5, 0.5 anchor-point the object is placed with its center. An anchor-point of 1,1\n    * places the object with its lower-right corner.\n    * @property anchor\n    * @type gs.Point\n     */\n    this.anchor = null;\n\n    /**\n    * The UI object's zoom-setting for x and y axis.\n    * @default new gs.Point(1.0, 1.0)\n    * @property zoom\n    * @type gs.Point\n     */\n    this.zoom = null;\n\n    /**\n    * The UI object's margin. The margin defines an extra space around the UI object. \n    * The default is { left: 0, top: 0, right: 0, bottom: 0 }.\n    * @property margin\n    * @type Object\n     */\n    this.margin = null;\n\n    /**\n    * The UI object's padding. The default is { left: 0, top: 0, right: 0, bottom: 0 }.\n    * @property padding\n    * @type Object\n     */\n    this.padding = null;\n\n    /**\n    * The UI object's mask for masking-effects.\n    * @property mask\n    * @type gs.Mask\n     */\n    this.mask = null;\n\n    /**\n    * The UI object's alignment.\n    * @property alignment\n    * @type ui.Alignment\n     */\n    this.alignment = -1;\n\n    /**\n    * The UI object's opacity to control transparency. For example: 0 = Transparent, 255 = Opaque, 128 = Semi-Transparent.\n    * @property opacity\n    * @type number\n     */\n    this.opacity = -1;\n\n    /**\n    * The object's clip-rect for visual presentation.\n    * @default null\n    * @property clipRect\n    * @type gs.Rect\n    * @protected\n     */\n    this.clipRect = null;\n\n    /**\n    * The corner-size of the frame.\n    * @property frameCornerSize\n    * @type number\n     */\n    this.frameCornerSize = -1;\n\n    /**\n    * The thickness of the frame.\n    * @property frameThickness\n    * @type number\n     */\n    this.frameThickness = -1;\n\n    /**\n    * The looping of the image.\n    * @property looping\n    * @type ui.Orientation\n     */\n    this.looping = null;\n\n    /**\n    * The object's z-index controls rendering-order/image-overlapping. An object with a smaller z-index is rendered\n    * before an object with a larger index. For example: To make sure a game object is always on top of the screen, it\n    * should have the largest z-index of all game objects.\n    * @property zIndex\n    * @type number\n     */\n    this.zIndex = -1;\n\n    /**\n    * The object's alignment on x-axis. Needs to be supported by layout.\n    * @property alignmentX\n    * @type number\n     */\n    this.alignmentX = -1;\n\n    /**\n    * The object's alignment on y-axis. Needs to be supported by layout.\n    * @property alignmentY\n    * @type number\n     */\n    this.alignmentY = -1;\n\n    /**\n    * The object's resize behavior.\n    * @property resizable\n    * @type boolean\n     */\n    this.resizable = null;\n\n    /**\n    * The original style descriptor.\n    * @property descriptor\n    * @type Object\n     */\n    this.descriptor = descriptor;\n    if (descriptor) {\n      this.setFromDescriptor(descriptor);\n    }\n  }\n\n\n  /**\n  * Initializes the style from a style-descriptor.\n  *\n  * @method setFromDescriptor\n  * @param {Object} descriptor - The style-descriptor.\n   */\n\n  Style.prototype.setFromDescriptor = function(descriptor) {\n    this.descriptor = descriptor;\n    this.image = descriptor.image;\n    if (descriptor.color) {\n      this.color = gs.Color.fromArray(descriptor.color);\n    }\n    if (descriptor.tone) {\n      this.tone = gs.Tone.fromArray(descriptor.tone);\n    }\n    if (descriptor.anchor) {\n      this.anchor = new gs.Point(descriptor.anchor[0], descriptor.anchor[1]);\n    }\n    if (descriptor.zoom) {\n      this.zoom = new gs.Point(descriptor.zoom[0], descriptor.zoom[1]);\n    }\n    if (descriptor.font) {\n      this.setupFont(descriptor);\n    }\n    if (descriptor.clipRect) {\n      this.clipRect = gs.Rect.fromArray(descriptor.clipRect);\n    }\n    if (descriptor.opacity >= 0) {\n      this.opacity = descriptor.opacity;\n    }\n    if (descriptor.alignment >= 0) {\n      this.alignment = descriptor.alignment;\n    }\n    if (descriptor.margin) {\n      this.margin = ui.Space.fromArray(descriptor.margin);\n    }\n    if (descriptor.padding) {\n      this.padding = ui.Space.fromArray(descriptor.padding);\n    }\n    this.animations = descriptor.animations;\n    if (descriptor.frameCornerSize) {\n      this.frameCornerSize = descriptor.frameCornerSize;\n    }\n    if (descriptor.frameThickness) {\n      this.frameThickness = descriptor.frameThickness;\n    }\n    if (descriptor.frame) {\n      this.frame = descriptor.frame;\n    }\n    if (descriptor.looping) {\n      this.looping = descriptor.looping;\n    }\n    if (descriptor.resizable != null) {\n      this.resizable = descriptor.resizable;\n    }\n    if (descriptor.zIndex) {\n      this.zIndex = descriptor.zIndex;\n    }\n    if (descriptor.alignmentX) {\n      this.alignmentX = ui.UIManager.alignments[descriptor.alignmentX];\n    }\n    if (descriptor.alignmentY) {\n      return this.alignmentY = ui.UIManager.alignments[descriptor.alignmentY];\n    }\n  };\n\n  Style.prototype.set = function(style) {\n    this.image = style.image;\n    this.color.setFromObject(style.color);\n    this.tone.setFromObject(style.tone);\n    this.anchor.set(style.anchor.x, style.anchor.y);\n    this.zoom.set(style.zoom.x, style.zoom.y);\n    if (style.font) {\n      if (!this.font) {\n        this.font = new gs.Font(style.font.name, style.font.size);\n      }\n      this.font.set(style.font);\n    }\n    if (style.clipRect) {\n      if (!this.clipRect) {\n        this.clipRect = new gs.Rect();\n      }\n      this.clipRect.setFromObject(style.clipRect);\n    }\n    this.opacity = style.opacitz;\n    this.alignment = style.alignment;\n    this.margin.setFromObject(style.margin);\n    return this.padding.setFromObject(style.padding);\n  };\n\n\n  /**\n  * Initializes font-data from a style-descriptor.\n  *\n  * @method setupFont\n  * @param {Object} descriptor - The style-descriptor.\n  * @protected\n   */\n\n  Style.prototype.setupFont = function(descriptor) {\n    var ref, ref1, ref10, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;\n    if (descriptor.font) {\n      if (!this.font) {\n        this.font = new Font(descriptor.font.name, (ref = descriptor.font.size) != null ? ref : 0);\n      } else {\n        this.font.name = descriptor.font.name;\n        this.font.size = (ref1 = descriptor.font.size) != null ? ref1 : 0;\n      }\n      this.font.bold = (ref2 = descriptor.font.bold) != null ? ref2 : this.font.bold;\n      this.font.italic = (ref3 = descriptor.font.italic) != null ? ref3 : this.font.italic;\n      this.font.smallCaps = (ref4 = descriptor.font.smallCaps) != null ? ref4 : this.font.smallCaps;\n      this.font.underline = (ref5 = descriptor.font.underline) != null ? ref5 : this.font.underline;\n      this.font.strikeThrough = (ref6 = descriptor.font.strikeThrough) != null ? ref6 : this.font.strikeThrough;\n      if (descriptor.font.color != null) {\n        this.font.color.setFromArray(descriptor.font.color);\n      }\n      if (descriptor.font.border != null) {\n        this.font.border = (ref7 = descriptor.font.border) != null ? ref7 : false;\n        this.font.borderSize = (ref8 = descriptor.font.borderSize) != null ? ref8 : 4;\n        this.font.borderColor.set(0, 0, 0, 255);\n      }\n      if (descriptor.font.outline != null) {\n        this.font.border = (ref9 = descriptor.font.outline) != null ? ref9 : false;\n        this.font.borderSize = (ref10 = descriptor.font.outline.size) != null ? ref10 : 4;\n        if (descriptor.font.outline.color != null) {\n          return this.font.borderColor.setFromArray(descriptor.font.outline.color);\n        } else {\n          return this.font.borderColor.set(0, 0, 0, 255);\n        }\n      }\n    }\n  };\n\n\n  /**\n  * Applies the style to a UI object.\n  *\n  * @method apply\n  * @param {ui.Object_UIElement} object - The UI object where the style should be applied to.\n   */\n\n  Style.prototype.apply = function(object) {\n    var ref, ref1;\n    if (!object.activeStyles.contains(this)) {\n      object.activeStyles.push(this);\n      if (this.font) {\n        if ((ref = object.font) != null) {\n          ref.set(this.font);\n        }\n      }\n      if (this.color) {\n        object.color.set(this.color);\n      }\n      if (this.tone) {\n        if ((ref1 = object.tone) != null) {\n          ref1.set(this.tone);\n        }\n      }\n      if (this.image) {\n        object.image = this.image;\n      }\n      if (this.anchor) {\n        object.anchor.set(this.anchor.x, this.anchor.y);\n      }\n      if (this.zoom) {\n        object.zoom.set(this.zoom.x, this.zoom.y);\n      }\n      if (this.padding) {\n        object.padding.setFromObject(this.padding);\n      }\n      if (this.margin) {\n        object.margin.setFromObject(this.margin);\n      }\n      if (this.opacity >= 0) {\n        object.opacity = this.opacity;\n      }\n      if (this.alignment >= 0) {\n        object.alignment = this.alignment;\n      }\n      if (this.frameThickness >= 0) {\n        object.frameThickness = this.frameThickness;\n      }\n      if (this.frameCornerSize >= 0) {\n        object.frameCornerSize = this.frameCornerSize;\n      }\n      if (this.mask) {\n        object.mask.set(this.mask);\n      }\n      if (this.zIndex >= 0) {\n        object.zIndex = this.zIndex;\n      }\n      if (this.alignmentX >= 0) {\n        object.alignmentX = this.alignmentX;\n      }\n      if (this.alignmentY >= 0) {\n        object.alignmentY = this.alignmentY;\n      }\n      if (this.resizable != null) {\n        object.resizable = this.resizable;\n      }\n      this.applyLooping(object);\n      return this.applyAnimations(object);\n    }\n  };\n\n\n  /**\n  * Applies the looping-data of the style to a UI object.\n  *\n  * @method applyLooping\n  * @param {ui.Object_UIElement} object - The UI object where the looping-data should be applied to.\n  * @protected\n   */\n\n  Style.prototype.applyLooping = function(object) {\n    if (this.looping) {\n      if (!object.visual.looping) {\n        object.visual.dispose();\n        object.removeComponent(object.visual);\n        object.visual = new gs.Component_TilingSprite();\n        object.addComponent(object.visual);\n      }\n      object.visual.looping.vertical = this.looping.vertical;\n      return object.visual.looping.horizontal = this.looping.horizontal;\n    }\n  };\n\n\n  /**\n  * Applies the animation-data of the style to a UI object. This automatically adds an animation-handler\n  * component(ui.Component_AnimationHandler) with the id \"animationHandler\" to the UI object if not already exists.\n  *\n  * @method applyAnimations\n  * @param {ui.Object_UIElement} object - The UI object where the animation-data should be applied to.\n  * @protected\n   */\n\n  Style.prototype.applyAnimations = function(object) {\n    if (this.animations) {\n      object.animations = Object.deepCopy(this.animations);\n      if (!object.findComponentById(\"animationHandler\")) {\n        object.animationExecutor = new ui.Component_AnimationExecutor();\n        object.addComponent(new ui.Component_AnimationHandler(), \"animationHandler\");\n        return object.addComponent(object.animationExecutor, \"animationExecutor\");\n      }\n    }\n  };\n\n\n  /**\n  * Reverts the changes from a UI object made by this style. However, this resets all styleable properties\n  * were set by this style. So it is necessary to apply all other styles again, but that is already handles in\n  * ui.Component_UIBehavior.\n  *\n  * @method revert\n  * @param {ui.Object_UIElement} object - The UI object where the style should be reverted.\n   */\n\n  Style.prototype.revert = function(object) {\n    var activeStyles, i1, j, j1, k1, l, l1, m1, n, o, p, q, ref, ref1, s, t, u, w, x, y, z;\n    activeStyles = object.activeStyles;\n    if (object.activeStyles.contains(this)) {\n      object.activeStyles.remove(this);\n      if (this.font) {\n        object.font.set(gs.Fonts.TEXT);\n        for (j = activeStyles.length - 1; j >= 0; j += -1) {\n          s = activeStyles[j];\n          if (s.font) {\n            object.font.set(s.font);\n            break;\n          }\n        }\n      }\n      if (this.color) {\n        object.color.set(Color.WHITE);\n        for (l = activeStyles.length - 1; l >= 0; l += -1) {\n          s = activeStyles[l];\n          if (s.color) {\n            object.color.set(s.color);\n            break;\n          }\n        }\n      }\n      if (this.tone) {\n        if ((ref = object.tone) != null) {\n          ref.set(0, 0, 0, 0);\n        }\n        for (n = activeStyles.length - 1; n >= 0; n += -1) {\n          s = activeStyles[n];\n          if (s.tone) {\n            if ((ref1 = object.tone) != null) {\n              ref1.set(s.tone);\n            }\n            break;\n          }\n        }\n      }\n      if (this.image) {\n        object.image = null;\n        for (o = activeStyles.length - 1; o >= 0; o += -1) {\n          s = activeStyles[o];\n          if (s.image) {\n            object.image = s.image;\n            break;\n          }\n        }\n      }\n      if (this.anchor) {\n        object.anchor.set(0, 0);\n        for (p = activeStyles.length - 1; p >= 0; p += -1) {\n          s = activeStyles[p];\n          if (s.anchor) {\n            object.anchor.setFromObject(s.anchor);\n            break;\n          }\n        }\n      }\n      if (this.zoom) {\n        object.zoom.set(1.0, 1.0);\n        for (q = activeStyles.length - 1; q >= 0; q += -1) {\n          s = activeStyles[q];\n          if (s.zoom) {\n            object.zoom.setFromObject(s.zoom);\n            break;\n          }\n        }\n      }\n      if (this.padding) {\n        object.padding.set(0, 0, 0, 0);\n        for (t = activeStyles.length - 1; t >= 0; t += -1) {\n          s = activeStyles[t];\n          if (s.padding) {\n            object.padding.setFromObject(s.padding);\n            break;\n          }\n        }\n      }\n      if (this.margin) {\n        object.margin.set(0, 0, 0, 0);\n        for (u = activeStyles.length - 1; u >= 0; u += -1) {\n          s = activeStyles[u];\n          if (s.margin) {\n            object.margin.setFromObject(s.margin);\n            break;\n          }\n        }\n      }\n      if (this.opacity >= 0) {\n        object.opacity = 255;\n        for (w = activeStyles.length - 1; w >= 0; w += -1) {\n          s = activeStyles[w];\n          if (s.opacity >= 0) {\n            object.opacity = s.opacity;\n            break;\n          }\n        }\n      }\n      if (this.alignment >= 0) {\n        object.alignment = 0;\n        for (x = activeStyles.length - 1; x >= 0; x += -1) {\n          s = activeStyles[x];\n          if (s.alignment >= 0) {\n            object.alignment = s.alignment;\n            break;\n          }\n        }\n      }\n      if (this.frameCornerSize >= 0) {\n        object.frameCornerSize = 16;\n        for (y = activeStyles.length - 1; y >= 0; y += -1) {\n          s = activeStyles[y];\n          if (s.frameCornerSize >= 0) {\n            object.frameCornerSize = s.frameCornerSize;\n            break;\n          }\n        }\n      }\n      if (this.frameThickness >= 0) {\n        object.frameThickness = 16;\n        for (z = activeStyles.length - 1; z >= 0; z += -1) {\n          s = activeStyles[z];\n          if (s.frameThickness >= 0) {\n            object.frameThickness = s.frameThickness;\n            break;\n          }\n        }\n      }\n      if (this.mask) {\n        object.mask.set(null);\n        for (i1 = activeStyles.length - 1; i1 >= 0; i1 += -1) {\n          s = activeStyles[i1];\n          if (s.mask) {\n            object.mask.set(s.font);\n            break;\n          }\n        }\n      }\n      if (this.zIndex >= 0) {\n        object.zIndex = 0;\n        for (j1 = activeStyles.length - 1; j1 >= 0; j1 += -1) {\n          s = activeStyles[j1];\n          if (s.zIndex >= 0) {\n            object.zIndex = s.zIndex;\n            break;\n          }\n        }\n      }\n      if (this.alignmentX >= 0) {\n        object.alignmentX = 0;\n        for (k1 = activeStyles.length - 1; k1 >= 0; k1 += -1) {\n          s = activeStyles[k1];\n          if (s.alignmentX >= 0) {\n            object.alignmentX = s.alignmentX;\n            break;\n          }\n        }\n      }\n      if (this.alignmentY >= 0) {\n        object.alignmentY = 0;\n        for (l1 = activeStyles.length - 1; l1 >= 0; l1 += -1) {\n          s = activeStyles[l1];\n          if (s.alignmentY >= 0) {\n            object.alignmentY = s.alignmentY;\n            break;\n          }\n        }\n      }\n      if (this.resizable != null) {\n        object.resizable = false;\n        for (m1 = activeStyles.length - 1; m1 >= 0; m1 += -1) {\n          s = activeStyles[m1];\n          if (s.resizable != null) {\n            object.resizable = s.resizable;\n            break;\n          }\n        }\n      }\n      this.revertAnimations(object);\n      return this.revertLooping(object);\n    }\n  };\n\n\n  /**\n  * Reverts the animation-data changes applied to a UI object by this style.\n  *\n  * @method revertAnimations\n  * @param {ui.Object_UIElement} object - The UI object where the animation-data changes should be reverted.\n   */\n\n  Style.prototype.revertAnimations = function(object) {\n    var activeStyles, j, results, s;\n    activeStyles = object.activeStyles;\n    if (this.animations) {\n      object.animations = null;\n      results = [];\n      for (j = activeStyles.length - 1; j >= 0; j += -1) {\n        s = activeStyles[j];\n        if (s.animations) {\n          object.animations = Object.deepCopy(s.animations);\n          if (!object.findComponentById(\"animationHandler\")) {\n            results.push(object.addComponent(new ui.Component_AnimationHandler(), \"animationHandler\"));\n          } else {\n            results.push(void 0);\n          }\n        } else {\n          results.push(void 0);\n        }\n      }\n      return results;\n    }\n  };\n\n\n  /**\n  * Reverts the looping-data changes applied to a UI object by this style.\n  *\n  * @method revertLooping\n  * @param {ui.Object_UIElement} object - The UI object where the looping-data changes should be reverted.\n   */\n\n  Style.prototype.revertLooping = function(object) {\n    var activeStyles, j, results, s;\n    activeStyles = object.activeStyles;\n    if (this.looping) {\n      object.visual.looping.vertical = false;\n      object.visual.looping.horizontal = false;\n      results = [];\n      for (j = activeStyles.length - 1; j >= 0; j += -1) {\n        s = activeStyles[j];\n        if (s.looping) {\n          if (!object.visual.looping) {\n            object.visual.dispose();\n            object.removeComponent(object.visual);\n            object.visual = new gs.Component_TilingSprite();\n            object.addComponent(object.visual);\n          }\n          object.visual.looping.vertical = s.looping.vertical;\n          results.push(object.visual.looping.horizontal = s.looping.horizontal);\n        } else {\n          results.push(void 0);\n        }\n      }\n      return results;\n    }\n  };\n\n  return Style;\n\n})();\n\nui.Style = Style;\n\nUIManager = (function() {\n\n  /**\n  * Handles the creation of In Game UI elements. For more information about\n  * In-Game UI see help file.\n  *\n  * @module ui\n  * @class UIManager\n  * @memberof ui\n  * @constructor\n   */\n  function UIManager() {\n\n    /**\n    * Stores all registered UI layouts by name/id.\n    * @property layouts\n    * @type Object\n     */\n    this.layouts = {};\n\n    /**\n    * Stores all registered UI styles by name/id.\n    * @property styles\n    * @type Object\n     */\n    this.styles = {};\n\n    /**\n    * Stores all UI styles by number id.\n    * @property stylesById\n    * @type ui.Style[]\n     */\n    this.stylesById = new Array();\n\n    /**\n    * Stores all UI styles by style-name.\n    * @property stylesByName\n    * @type Object\n     */\n    this.stylesByName = {};\n\n    /**\n    * Stores all registered custom UI types/templates by name/id.\n    * @property customTypes\n    * @type Object\n     */\n    this.customTypes = {};\n\n    /**\n    * Stores all registered UI controllers by name/id.\n    * @property customTypes\n    * @type Object\n     */\n    this.controllers = {};\n\n    /**\n    * Stores all registered UI data sources by name/id.\n    * @property customTypes\n    * @type Object\n     */\n    this.dataSources = {};\n\n    /**\n    * Mapping to table to map alignment names to number values.\n    * @property alignments\n    * @type Object\n    * @protected\n     */\n    this.alignments = {\n      \"left\": 0,\n      \"top\": 0,\n      \"center\": 1,\n      \"bottom\": 2,\n      \"right\": 2,\n      \"0\": 0,\n      \"1\": 1,\n      \"2\": 2\n    };\n\n    /**\n    * Mapping to table to map blend-mode names to number values.\n    * @property blendModes\n    * @type Object\n    * @protected\n     */\n    this.blendModes = {\n      \"normal\": 0,\n      \"add\": 1,\n      \"sub\": 2\n    };\n\n    /**\n    * Mapping to table to map selector names to number values.\n    * @property selectors\n    * @type Object\n     */\n    this.selectors = {\n      normal: 0,\n      hover: 1,\n      selected: 2,\n      enabled: 3,\n      focused: 4\n    };\n    this.defaultPlaceholderParams = {};\n  }\n\n\n  /**\n  * Sets up UI Manager, optimizes styles, etc.\n  *\n  * @method setup\n   */\n\n  UIManager.prototype.setup = function() {\n    return this.setupStyles();\n  };\n\n\n  /**\n  * Sets up the UI styles by wrapping them into ui.Style objects and optimizing the access.\n  *\n  * @method setupStyles\n  * @protected\n   */\n\n  UIManager.prototype.setupStyles = function() {\n    var id, k, ref, selector, selectorMap, subs;\n    id = 0;\n    selectorMap = this.selectors;\n    for (k in this.styles) {\n      subs = k.split(\" \");\n      selector = subs[0].split(\":\");\n      if (selectorMap[selector[1]]) {\n        this.stylesById[id] = new ui.Style(this.styles[k], id, selectorMap[selector[1]]);\n      } else {\n        this.stylesById[id] = new ui.Style(this.styles[k], id, 0);\n      }\n      if (!this.stylesByName[selector[0]]) {\n        this.stylesByName[selector[0]] = [];\n      }\n      this.stylesByName[selector[0]].push(this.stylesById[id]);\n      this.styles[k] = this.stylesById[id];\n      id++;\n    }\n    for (k in this.styles) {\n      subs = k.split(\" \");\n      if (subs.length > 1) {\n        this.stylesByName[subs[1]].push(this.styles[k]);\n        this.styles[k].target = (ref = this.styles[k.split(\":\")[0]]) != null ? ref.id : void 0;\n      }\n    }\n    return null;\n  };\n\n\n  /**\n  * Executes all placeholder formulas in the specified descriptor. The descriptor will be changed\n  * and placeholder formulas are replaced with their evaluated result value.\n  *\n  * @method executePlaceholderFormulas\n  * @param {Object} descriptor - The descriptor.\n  * @param {Object} params - Object containing the placeholder params.\n  * @protected\n   */\n\n  UIManager.prototype.executePlaceholderFormulas = function(descriptor, id, params) {\n    var c, i, j, k, keys, l, len, len1, v;\n    if (descriptor == null) {\n      return;\n    }\n    keys = Object.keys(descriptor);\n    for (j = 0, len = keys.length; j < len; j++) {\n      k = keys[j];\n      v = descriptor[k];\n      if (v != null) {\n        if (v instanceof Array) {\n          for (c = l = 0, len1 = v.length; l < len1; c = ++l) {\n            i = v[c];\n            if (i != null) {\n              if (typeof i === \"object\") {\n                this.executePlaceholderFormulas(i, id, params);\n              } else if (c !== \"exec\" && typeof i === \"function\") {\n                window.p = params || this.defaultPlaceholderParams;\n                window.d = descriptor;\n                v[c] = i();\n              }\n            }\n          }\n        } else if (typeof v === \"object\") {\n          this.executePlaceholderFormulas(v, id, params);\n        } else if (k !== \"exec_\" && typeof v === \"function\") {\n          window.p = params || this.defaultPlaceholderParams;\n          window.d = descriptor;\n          descriptor[k] = v();\n        }\n      }\n    }\n    return null;\n  };\n\n\n  /**\n  * Creates a calculation for a specified expression.\n  *\n  * @method createCalcFunction\n  * @param {String} expression - The expression to create a calculation function for.\n  * @return {Function} The calculation function.\n  * @protected\n   */\n\n  UIManager.prototype.createCalcFunction = function(expression) {\n    expression = expression.replace(/([0-9]+)%/gm, \"($1 / 100 * v)\");\n    return eval(\"(function(v){ return \" + expression + \"})\");\n  };\n\n\n  /**\n  * Creates an object from the specified object type. The type has the format\n  * <namespace>.<typename> like vn.Component_Hotspot.\n  *\n  * @method createObject\n  * @param {String} type - The type name.\n  * @return {Object} The created object.\n  * @protected\n   */\n\n  UIManager.prototype.createObject = function(type) {\n    var subs;\n    subs = type.split(\".\");\n    return new window[subs[0]][subs[1]]();\n  };\n\n\n  /**\n  * Creates an UI object from a specified UI descriptor.\n  *\n  * @method createFromDescriptor\n  * @param {Object} descriptor - The UI object descriptor.\n  * @param {gs.Object_UIElement} parent - The UI parent object. (A layout for example).\n  * @return {gs.Object_UIElement} The created UI object.\n   */\n\n  UIManager.prototype.createFromDescriptor = function(descriptor, parent) {\n    var control, k;\n    control = null;\n    for (k in this.controllers) {\n      if (this.controllers[k].type != null) {\n        this.controllers[k] = this.createObject(this.controllers[k].type);\n      }\n    }\n    return this._createFromDescriptor(descriptor, parent);\n  };\n\n\n  /**\n  * Creates an image button UI object.\n  *\n  * @method createImageButton\n  * @param {Object} descriptor - The UI object descriptor.\n  * @return {gs.Object_UIElement} The created image button UI object.\n   */\n\n  UIManager.prototype.createImageButton = function(descriptor) {\n    var control;\n    control = new ui.Object_Hotspot(descriptor.image, descriptor.imageHandling);\n    control.behavior.sound = descriptor.sound;\n    control.behavior.sounds = descriptor.sounds;\n    control.image = descriptor.image;\n    control.images = descriptor.images;\n    if (descriptor.imageFolder != null) {\n      control.imageFolder = descriptor.imageFolder;\n    }\n    if (descriptor.looping != null) {\n      control.visual.dispose();\n      control.removeComponent(control.visual);\n      control.visual = new gs.Component_TilingSprite();\n      control.addComponent(control.visual);\n      control.visual.looping.vertical = descriptor.looping.vertical;\n      control.visual.looping.horizontal = descriptor.looping.horizontal;\n    }\n    if (descriptor.color != null) {\n      control.color = Color.fromArray(descriptor.color);\n    }\n    return control;\n  };\n\n\n  /**\n  * Creates an image UI object.\n  *\n  * @method createImage\n  * @param {Object} descriptor - The UI object descriptor.\n  * @return {gs.Object_UIElement} The created image button UI object.\n   */\n\n  UIManager.prototype.createImage = function(descriptor) {\n    var control;\n    control = new ui.Object_Image(descriptor.image, descriptor.imageHandling);\n    if (descriptor.imageFolder != null) {\n      control.imageFolder = descriptor.imageFolder;\n    }\n    if (descriptor.looping != null) {\n      control.visual.dispose();\n      control.removeComponent(control.visual);\n      control.visual = new gs.Component_TilingSprite();\n      control.addComponent(control.visual);\n      control.visual.looping.vertical = descriptor.looping.vertical;\n      control.visual.looping.horizontal = descriptor.looping.horizontal;\n    }\n    if (descriptor.color != null) {\n      control.color = Color.fromArray(descriptor.color);\n    }\n    return control;\n  };\n\n\n  /**\n  * Creates an image map UI object.\n  *\n  * @method createImageMap\n  * @param {Object} descriptor - The UI object descriptor.\n  * @return {gs.Object_UIElement} The created image button UI object.\n   */\n\n  UIManager.prototype.createImageMap = function(descriptor) {\n    var control;\n    control = new ui.Object_ImageMap();\n    control.hotspots = (descriptor.hotspots || []).select(function(h) {\n      return {\n        x: h.rect[0],\n        y: h.rect[1],\n        size: {\n          width: h.rect[2],\n          height: h.rect[3]\n        },\n        data: {\n          action: 3,\n          actions: h.actions\n        }\n      };\n    });\n    control.images = descriptor.images;\n    control.insertComponent(new ui.Component_ActionHandler(), 1, \"actionHandler\");\n    control.target = SceneManager.scene.behavior;\n    return control;\n  };\n\n\n  /**\n  * Creates a video UI object.\n  *\n  * @method createVideo\n  * @param {Object} descriptor - The UI object descriptor.\n  * @return {gs.Object_UIElement} The created image button UI object.\n   */\n\n  UIManager.prototype.createVideo = function(descriptor) {\n    var control, ref;\n    control = new ui.Object_Video();\n    control.video = descriptor.video;\n    control.loop = (ref = descriptor.loop) != null ? ref : true;\n    return control;\n  };\n\n\n  /**\n  * Creates a panel UI object.\n  *\n  * @method createPanel\n  * @param {Object} descriptor - The UI object descriptor.\n  * @return {gs.Object_UIElement} The created image button UI object.\n   */\n\n  UIManager.prototype.createPanel = function(descriptor) {\n    var control, ref;\n    control = new ui.Object_Panel();\n    control.modal = (ref = descriptor.modal) != null ? ref : false;\n    if (descriptor.color != null) {\n      control.color = Color.fromArray(descriptor.color);\n    }\n    return control;\n  };\n\n\n  /**\n  * Creates a frame UI object.\n  *\n  * @method createFrame\n  * @param {Object} descriptor - The UI object descriptor.\n  * @return {gs.Object_UIElement} The created image button UI object.\n   */\n\n  UIManager.prototype.createFrame = function(descriptor) {\n    var control;\n    control = new ui.Object_Frame(descriptor.frameSkin);\n    control.frameThickness = descriptor.frameThickness || 16;\n    control.frameCornerSize = descriptor.frameCornerSize || 16;\n    control.image = descriptor.image;\n    control.images = descriptor.images;\n    return control;\n  };\n\n\n  /**\n  * Creates a three-part image UI object.\n  *\n  * @method createThreePartImage\n  * @param {Object} descriptor - The UI object descriptor.\n  * @return {gs.Object_UIElement} The created image button UI object.\n   */\n\n  UIManager.prototype.createThreePartImage = function(descriptor) {\n    var control;\n    control = new ui.Object_ThreePartImage(descriptor.frameSkin);\n    control.firstPartSize = descriptor.firstPartSize || 16;\n    control.middlePartSize = descriptor.middlePartSize || 1;\n    control.lastPartSize = descriptor.lastPartSize || 16;\n    control.image = descriptor.image;\n    control.images = descriptor.images;\n    return control;\n  };\n\n\n  /**\n  * Creates a text UI object.\n  *\n  * @method createText\n  * @param {Object} descriptor - The UI object descriptor.\n  * @return {gs.Object_UIElement} The created image button UI object.\n   */\n\n  UIManager.prototype.createText = function(descriptor) {\n    var control, ref;\n    control = new ui.Object_Text();\n    control.text = lcs(descriptor.text);\n    control.sizeToFit = descriptor.sizeToFit;\n    control.formatting = descriptor.formatting;\n    control.wordWrap = (ref = descriptor.wordWrap) != null ? ref : false;\n    control.behavior.format = descriptor.format;\n    if (descriptor.textPadding) {\n      control.behavior.padding = ui.Space.fromArray(descriptor.textPadding);\n    }\n    if (descriptor.resolvePlaceholders != null) {\n      control.resolvePlaceholders = descriptor.resolvePlaceholders;\n    }\n    if (descriptor.color != null) {\n      control.color = Color.fromArray(descriptor.color);\n    }\n    return control;\n  };\n\n\n  /**\n  * Creates a free-layout UI object.\n  *\n  * @method createFreeLayout\n  * @param {Object} descriptor - The UI object descriptor.\n  * @return {gs.Object_UIElement} The created image button UI object.\n   */\n\n  UIManager.prototype.createFreeLayout = function(descriptor) {\n    var control;\n    if (descriptor.frame != null) {\n      control = new ui.Object_FreeLayout(descriptor.frame[0] || 0, descriptor.frame[1] || 0, descriptor.frame[2] || 1, descriptor.frame[3] || 1);\n    } else {\n      control = new ui.Object_FreeLayout(0, 0, 1, 1);\n    }\n    control.sizeToFit = descriptor.sizeToFit;\n    return control;\n  };\n\n\n  /**\n  * Creates a stack-layout UI object.\n  *\n  * @method createStackLayout\n  * @param {Object} descriptor - The UI object descriptor.\n  * @return {gs.Object_UIElement} The created image button UI object.\n   */\n\n  UIManager.prototype.createStackLayout = function(descriptor) {\n    var control;\n    if (descriptor.frame != null) {\n      control = new ui.Object_StackLayout(descriptor.frame[0] || 0, descriptor.frame[1] || 0, descriptor.frame[2] || 1, descriptor.frame[3] || 1, descriptor.orientation);\n    } else {\n      control = new ui.Object_StackLayout(0, 0, 1, 1, descriptor.orientation);\n    }\n    control.sizeToFit = descriptor.sizeToFit;\n    return control;\n  };\n\n\n  /**\n  * Creates a spread-layout UI object.\n  *\n  * @method createSpreadLayout\n  * @param {Object} descriptor - The UI object descriptor.\n  * @return {gs.Object_UIElement} The created image button UI object.\n   */\n\n  UIManager.prototype.createSpreadLayout = function(descriptor) {\n    var control;\n    if (descriptor.frame != null) {\n      control = new ui.Object_SpreadLayout(descriptor.frame[0] || 0, descriptor.frame[1] || 0, descriptor.frame[2] || 1, descriptor.frame[3] || 1, descriptor.orientation);\n    } else {\n      control = new ui.Object_SpreadLayout(0, 0, 1, 1, descriptor.orientation);\n    }\n    return control;\n  };\n\n\n  /**\n  * Creates a grid-layout UI object.\n  *\n  * @method createGridLayout\n  * @param {Object} descriptor - The UI object descriptor.\n  * @return {gs.Object_UIElement} The created image button UI object.\n   */\n\n  UIManager.prototype.createGridLayout = function(descriptor) {\n    var control;\n    if (descriptor.frame != null) {\n      control = new ui.Object_GridLayout(descriptor.frame[0], descriptor.frame[1], descriptor.frame[2], descriptor.frame[3], descriptor.rows, descriptor.columns, descriptor.template);\n    } else {\n      control = new ui.Object_GridLayout(0, 0, 1, 1, descriptor.rows, descriptor.columns, descriptor.template);\n    }\n    control.cellSpacing = descriptor.cellSpacing || [0, 0, 0, 0];\n    control.sizeToFit = descriptor.sizeToFit;\n    return control;\n  };\n\n\n  /**\n  * Creates a message UI object.\n  *\n  * @method createMessage\n  * @param {Object} descriptor - The UI object descriptor.\n  * @return {gs.Object_UIElement} The created image button UI object.\n   */\n\n  UIManager.prototype.createMessage = function(descriptor) {\n    var control;\n    control = new ui.Object_Message();\n    return control;\n  };\n\n\n  /**\n  * Creates a data-grid UI object.\n  *\n  * @method createDataGrid\n  * @param {Object} descriptor - The UI object descriptor.\n  * @return {gs.Object_UIElement} The created image button UI object.\n   */\n\n  UIManager.prototype.createDataGrid = function(descriptor) {\n    var control;\n    control = new ui.Object_DataGrid(descriptor);\n    return control;\n  };\n\n\n  /**\n  * Creates an UI object depending on the object-type of the specified UI descriptor.\n  *\n  * @method createControl\n  * @param {Object} descriptor - The UI object descriptor.\n  * @return {gs.Object_UIElement} The created UI object.\n  * @protected\n   */\n\n  UIManager.prototype.createControl = function(descriptor) {\n    var control;\n    control = null;\n    switch (descriptor.type) {\n      case \"ui.ImageButton\":\n        control = this.createImageButton(descriptor);\n        break;\n      case \"ui.Image\":\n        control = this.createImage(descriptor);\n        break;\n      case \"ui.ImageMap\":\n        control = this.createImageMap(descriptor);\n        break;\n      case \"ui.Video\":\n        control = this.createVideo(descriptor);\n        break;\n      case \"ui.Panel\":\n        control = this.createPanel(descriptor);\n        break;\n      case \"ui.Frame\":\n        control = this.createFrame(descriptor);\n        break;\n      case \"ui.ThreePartImage\":\n        control = this.createThreePartImage(descriptor);\n        break;\n      case \"ui.Text\":\n        control = this.createText(descriptor);\n        break;\n      case \"ui.Message\":\n        control = this.createMessage(descriptor);\n        break;\n      case \"ui.DataGrid\":\n        control = this.createDataGrid(descriptor);\n        break;\n      case \"ui.FreeLayout\":\n        control = this.createFreeLayout(descriptor);\n        break;\n      case \"ui.StackLayout\":\n        control = this.createStackLayout(descriptor);\n        break;\n      case \"ui.SpreadLayout\":\n        control = this.createSpreadLayout(descriptor);\n        break;\n      case \"ui.GridLayout\":\n        control = this.createGridLayout(descriptor);\n    }\n    return control;\n  };\n\n  UIManager.prototype.createLayoutRect = function(frame, control) {\n    var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;\n    if (!control.layoutRect) {\n      control.layoutRect = new ui.LayoutRect();\n    }\n    control.layoutRect.set(0, 0, 0, 0);\n    if (frame != null) {\n      if (((ref = frame[0]) != null ? ref.length : void 0) != null) {\n        control.layoutRect.x = this.createCalcFunction(frame[0]);\n        control.dstRect.x = 0;\n      } else {\n        control.dstRect.x = (ref1 = descriptor.frame[0]) != null ? ref1 : control.dstRect.x;\n      }\n      if (((ref2 = frame[1]) != null ? ref2.length : void 0) != null) {\n        control.layoutRect.y = this.createCalcFunction(frame[1]);\n        control.dstRect.y = 0;\n      } else {\n        control.dstRect.y = (ref3 = frame[1]) != null ? ref3 : control.dstRect.y;\n      }\n      if (((ref4 = frame[2]) != null ? ref4.length : void 0) != null) {\n        control.layoutRect.width = this.createCalcFunction(frame[2]);\n        control.dstRect.width = 1;\n      } else {\n        control.dstRect.width = (ref5 = frame[2]) != null ? ref5 : control.dstRect.width;\n      }\n      if (((ref6 = frame[3]) != null ? ref6.length : void 0) != null) {\n        control.layoutRect.height = this.createCalcFunction(frame[3]);\n        return control.dstRect.height = 1;\n      } else {\n        return control.dstRect.height = (ref7 = frame[3]) != null ? ref7 : control.dstRect.height;\n      }\n    }\n  };\n\n\n  /**\n  * Adds the styles defined in an array of style-names to the specified control.\n  *\n  * @method addControlStyles\n  * @param {Object} control - The control to add the styles to.\n  * @param {string[]} styles - Array of style-names to add.\n   */\n\n  UIManager.prototype.addControlStyles = function(control, styles) {\n    var j, len, results, style, styleName;\n    results = [];\n    for (j = 0, len = styles.length; j < len; j++) {\n      styleName = styles[j];\n      if (this.stylesByName[styleName] != null) {\n        results.push((function() {\n          var l, len1, ref, results1;\n          ref = this.stylesByName[styleName];\n          results1 = [];\n          for (l = 0, len1 = ref.length; l < len1; l++) {\n            style = ref[l];\n            control.styles.push(style);\n            if (style.target === -1 && style.selector === 0) {\n              results1.push(style.apply(control));\n            } else {\n              results1.push(void 0);\n            }\n          }\n          return results1;\n        }).call(this));\n      } else {\n        results.push(void 0);\n      }\n    }\n    return results;\n  };\n\n\n  /**\n  * Creates an UI object from a specified UI descriptor. This method is called\n  * recursively for all child-descriptors.\n  *\n  * @method createControlFromDescriptor\n  * @param {Object} descriptor - The UI object descriptor.\n  * @param {gs.Object_UIElement} parent - The UI parent object. (A layout for example).\n  * @param {number} index - The index.\n  * @return {gs.Object_UIElement} The created UI object.\n  * @protected\n   */\n\n  UIManager.prototype.createControlFromDescriptor = function(descriptor, parent, index) {\n    var action, actions, bindings, c, child, childControl, component, control, controls, customFields, data, formulas, i, isNumber, item, j, l, len, len1, len2, len3, m, n, o, p, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref22, ref23, ref24, ref25, ref26, ref27, ref3, ref4, ref5, ref6, ref7, ref8, ref9, style, target, type, typeName, valid;\n    control = null;\n    if (descriptor.style != null) {\n      descriptor.styles = [descriptor.style];\n      delete descriptor.style;\n    }\n    descriptor = Object.deepCopy(descriptor);\n    this.executePlaceholderFormulas(descriptor, descriptor.id, descriptor.params);\n    control = this.createControl(descriptor);\n    if (control == null) {\n      type = Object.deepCopy(this.customTypes[descriptor.type]);\n      this.executePlaceholderFormulas(type, descriptor.id, descriptor.params);\n      typeName = type.type;\n      customFields = type.customFields;\n      bindings = type.bindings;\n      formulas = type.formulas;\n      actions = type.actions;\n      if (type.style != null) {\n        type.styles = [type.style];\n        type.style = null;\n      }\n      Object.mixin(type, descriptor);\n      if (customFields != null) {\n        Object.mixin(type.customFields, customFields);\n      }\n      if ((bindings != null) && bindings !== type.bindings) {\n        type.bindings = type.bindings.concat(bindings);\n      }\n      if ((formulas != null) && formulas !== type.formulas) {\n        type.formulas = type.formulas.concat(formulas);\n      }\n      if ((actions != null) && actions !== type.actions) {\n        type.actions = actions.concat(type.actions);\n      }\n      type.type = typeName;\n      return this.createControlFromDescriptor(type, parent);\n    } else if (parent != null) {\n      parent.addObject(control);\n      control.index = index;\n    } else {\n      gs.ObjectManager.current.addObject(control);\n    }\n    control.ui = new ui.Component_UIBehavior();\n    control.addComponent(control.ui);\n    control.params = descriptor.params;\n    if (descriptor.updateBehavior === \"continuous\") {\n      control.updateBehavior = ui.UpdateBehavior.CONTINUOUS;\n    }\n    if (descriptor.inheritProperties) {\n      control.inheritProperties = true;\n    }\n    if (descriptor.font != null) {\n      control.font = new Font(descriptor.font.name, descriptor.font.size);\n      control.font.bold = (ref = descriptor.font.bold) != null ? ref : control.font.bold;\n      control.font.italic = (ref1 = descriptor.font.italic) != null ? ref1 : control.font.italic;\n      control.font.smallCaps = (ref2 = descriptor.font.smallCaps) != null ? ref2 : control.font.smallCaps;\n      control.font.underline = (ref3 = descriptor.font.underline) != null ? ref3 : control.font.underline;\n      control.font.strikeThrough = (ref4 = descriptor.font.strikeThrough) != null ? ref4 : control.font.strikeThrough;\n      if (descriptor.font.color != null) {\n        control.font.color = Color.fromArray(descriptor.font.color);\n      }\n      if (descriptor.font.border != null) {\n        control.font.border = (ref5 = descriptor.font.border) != null ? ref5 : false;\n        control.font.borderSize = (ref6 = descriptor.font.borderSize) != null ? ref6 : 4;\n        control.font.borderColor = new Color(0, 0, 0);\n      }\n      if (descriptor.font.outline != null) {\n        control.font.border = (ref7 = descriptor.font.outline) != null ? ref7 : false;\n        control.font.borderSize = (ref8 = descriptor.font.outline.size) != null ? ref8 : 4;\n        if (descriptor.font.outline.color != null) {\n          control.font.borderColor = Color.fromArray(descriptor.font.outline.color);\n        } else {\n          control.font.borderColor = new Color(0, 0, 0);\n        }\n      }\n    }\n    if (descriptor.components != null) {\n      ref9 = descriptor.components;\n      for (j = 0, len = ref9.length; j < len; j++) {\n        c = ref9[j];\n        m = c.module || \"gs\";\n        component = new window[m][c.type](c.params);\n        control.addComponent(component, c.id);\n        control[c.id] = component;\n      }\n    }\n    control.focusable = (ref10 = descriptor.focusable) != null ? ref10 : control.focusable;\n    if (descriptor.nextKeyObject) {\n      control.ui.nextKeyObjectId = descriptor.nextKeyObject;\n    }\n    if (descriptor.initialFocus) {\n      control.ui.focus();\n    }\n    actions = Object.deepCopy(descriptor.action != null ? [descriptor.action] : descriptor.actions);\n    if (actions != null) {\n      for (l = 0, len1 = actions.length; l < len1; l++) {\n        action = actions[l];\n        if (action != null) {\n          action.event = (ref11 = action.event) != null ? ref11 : \"onAccept\";\n          if (action.target == null) {\n            target = this.controllers != null ? this.controllers[descriptor.target] : controller;\n            action.target = target || SceneManager.scene.behavior;\n          }\n        }\n      }\n      control.actions = actions;\n      if (!control.findComponentById(\"actionHandler\")) {\n        control.insertComponent(new ui.Component_ActionHandler(), 1, \"actionHandler\");\n      }\n    }\n    if (descriptor.id != null) {\n      control.id = descriptor.id;\n      gs.ObjectManager.current.setObjectById(control, control.id);\n    }\n    control.descriptor = descriptor;\n    control.layoutRect = new Rect();\n    control.layoutRect.set(0, 0, 0, 0);\n    if (descriptor.frame != null) {\n      if (((ref12 = descriptor.frame[0]) != null ? ref12.length : void 0) != null) {\n        control.layoutRect.x = this.createCalcFunction(descriptor.frame[0]);\n        control.dstRect.x = 0;\n      } else {\n        control.dstRect.x = (ref13 = descriptor.frame[0]) != null ? ref13 : control.dstRect.x;\n      }\n      if (((ref14 = descriptor.frame[1]) != null ? ref14.length : void 0) != null) {\n        control.layoutRect.y = this.createCalcFunction(descriptor.frame[1]);\n        control.dstRect.y = 0;\n      } else {\n        control.dstRect.y = (ref15 = descriptor.frame[1]) != null ? ref15 : control.dstRect.y;\n      }\n      if (((ref16 = descriptor.frame[2]) != null ? ref16.length : void 0) != null) {\n        control.layoutRect.width = this.createCalcFunction(descriptor.frame[2]);\n        control.dstRect.width = 1;\n      } else {\n        control.dstRect.width = (ref17 = descriptor.frame[2]) != null ? ref17 : control.dstRect.width;\n      }\n      if (((ref18 = descriptor.frame[3]) != null ? ref18.length : void 0) != null) {\n        control.layoutRect.height = this.createCalcFunction(descriptor.frame[3]);\n        control.dstRect.height = 1;\n      } else {\n        control.dstRect.height = (ref19 = descriptor.frame[3]) != null ? ref19 : control.dstRect.height;\n      }\n    }\n    if (descriptor.sizeToParent != null) {\n      control.sizeToParent = descriptor.sizeToParent;\n    }\n    if (descriptor.blendMode != null) {\n      control.blendMode = this.blendModes[descriptor.blendMode];\n    }\n    if (descriptor.anchor != null) {\n      control.anchor.set(descriptor.anchor[0], descriptor.anchor[1]);\n    }\n    control.opacity = (ref20 = descriptor.opacity) != null ? ref20 : 255;\n    if (descriptor.minimumSize != null) {\n      control.minimumSize = {\n        width: descriptor.minimumSize[0],\n        height: descriptor.minimumSize[1]\n      };\n    }\n    if (descriptor.resizable != null) {\n      control.resizable = descriptor.resizable;\n    }\n    if (descriptor.scrollable != null) {\n      control.scrollable = descriptor.scrollable;\n    }\n    if (descriptor.fixedSize != null) {\n      control.fixedSize = descriptor.fixedSize;\n    }\n    if (descriptor.draggable != null) {\n      control.draggable = descriptor.draggable;\n      control.draggable.step = 0;\n      if (control.draggable.rect != null) {\n        control.draggable.rect = Rect.fromArray(control.draggable.rect);\n      }\n      control.addComponent(new ui.Component_Draggable());\n    }\n    if (descriptor.bindings != null) {\n      control.bindings = descriptor.bindings;\n      control.insertComponent(new ui.Component_BindingHandler(), 0);\n    }\n    if (descriptor.formulas != null) {\n      control.formulas = descriptor.formulas;\n      control.insertComponent(new ui.Component_FormulaHandler(), 0);\n    }\n    control.dataField = descriptor.dataField;\n    control.enabled = (ref21 = descriptor.enabled) != null ? ref21 : true;\n    if (descriptor.selectable != null) {\n      control.selectable = descriptor.selectable;\n    }\n    if (descriptor.group != null) {\n      control.group = descriptor.group;\n      gs.ObjectManager.current.addToGroup(control, control.group);\n    }\n    if (descriptor.customFields != null) {\n      control.customFields = Object.deepCopy(descriptor.customFields);\n    }\n    if (descriptor.margin != null) {\n      control.margin.left = descriptor.margin[0];\n      control.margin.top = descriptor.margin[1];\n      control.margin.right = descriptor.margin[2];\n      control.margin.bottom = descriptor.margin[3];\n    }\n    if (descriptor.padding != null) {\n      control.padding.left = descriptor.padding[0];\n      control.padding.top = descriptor.padding[1];\n      control.padding.right = descriptor.padding[2];\n      control.padding.bottom = descriptor.padding[3];\n    }\n    if (descriptor.alignment != null) {\n      control.alignment = this.alignments[descriptor.alignment];\n    }\n    control.alignmentY = this.alignments[descriptor.alignmentY || 0];\n    control.alignmentX = this.alignments[descriptor.alignmentX || 0];\n    control.zIndex = descriptor.zIndex || 0;\n    control.order = descriptor.order || 0;\n    control.chainOrder = ((ref22 = descriptor.chainOrder) != null ? ref22 : descriptor.zOrder) + ((parent != null ? parent.chainOrder : void 0) || 0);\n    if (descriptor.zoom != null) {\n      control.zoom = {\n        x: descriptor.zoom[0] / 100,\n        y: descriptor.zoom[1] / 100\n      };\n    }\n    if (descriptor.visible != null) {\n      control.visible = descriptor.visible;\n    }\n    if (descriptor.clipRect) {\n      control.clipRect = new Rect(control.dstRect.x, control.dstRect.y, control.dstRect.width, control.dstRect.height);\n    }\n    if (descriptor.styles != null) {\n      this.addControlStyles(control, descriptor.styles);\n    }\n    if (descriptor.template != null) {\n      control.behavior.managementMode = ui.LayoutManagementMode.fromString(descriptor.managementMode);\n      data = ui.Component_FormulaHandler.fieldValue(control, control.dataField);\n      isNumber = typeof data === \"number\";\n      if (data != null) {\n        for (i = n = 0, ref23 = (ref24 = data.length) != null ? ref24 : data; 0 <= ref23 ? n < ref23 : n > ref23; i = 0 <= ref23 ? ++n : --n) {\n          if ((data[i] != null) || isNumber) {\n            valid = true;\n            if ((descriptor.dataFilter != null) && !isNumber) {\n              valid = ui.Component_Handler.checkCondition(data[i], descriptor.dataFilter);\n            }\n            if (valid || isNumber) {\n              child = this.createControlFromDescriptor(descriptor.template, control, i);\n              if ((ref25 = data[i]) != null ? ref25.dstRect : void 0) {\n                child.dstRect = ui.UIElementRectangle.fromRect(child, data[i].dstRect);\n              }\n              if ((child.clipRect == null) && (control.clipRect != null)) {\n                child.clipRect = control.clipRect;\n              }\n              control.addObject(child);\n              child.index = i;\n              child.order = ((ref26 = data.length) != null ? ref26 : data) - i;\n              control.controls.push(child);\n            }\n          }\n        }\n      }\n    }\n    if (descriptor.controls && descriptor.controls.exec) {\n      controls = ui.Component_FormulaHandler.fieldValue(descriptor, descriptor.controls);\n    } else {\n      controls = descriptor.controls;\n    }\n    if (controls != null) {\n      for (i = o = 0, len2 = controls.length; o < len2; i = ++o) {\n        item = controls[i];\n        childControl = this._createFromDescriptor(item, control, i);\n        if ((childControl.clipRect == null) && (control.clipRect != null)) {\n          childControl.clipRect = control.clipRect;\n        }\n        childControl.index = i;\n        childControl.origin.x = control.origin.x + control.dstRect.x;\n        childControl.origin.y = control.origin.y + control.dstRect.y;\n        control.addObject(childControl);\n        control.controls.push(childControl);\n      }\n    }\n    if (control.styles && control.parentsByStyle) {\n      parent = control.parent;\n      while (parent) {\n        if (parent.styles) {\n          ref27 = parent.styles;\n          for (p = 0, len3 = ref27.length; p < len3; p++) {\n            style = ref27[p];\n            if (!control.parentsByStyle[style.id]) {\n              control.parentsByStyle[style.id] = [];\n            }\n            control.parentsByStyle[style.id].push(parent);\n          }\n        }\n        parent = parent.parent;\n      }\n    }\n    if (descriptor.animations != null) {\n      control.animations = Object.deepCopy(descriptor.animations);\n      control.animationExecutor = new ui.Component_AnimationExecutor();\n      control.addComponent(control.animationExecutor);\n      control.addComponent(new ui.Component_AnimationHandler());\n    }\n    control.ui.updateStyle();\n    control.setup();\n    return control;\n  };\n\n\n  /**\n  * Creates an UI object from a specified UI descriptor.\n  *\n  * @method _createFromDescriptor\n  * @param {Object} descriptor - The UI object descriptor.\n  * @param {gs.Object_UIElement} parent - The UI parent object. (A layout for example).\n  * @return {gs.Object_UIElement} The created UI object.\n  * @protected\n   */\n\n  UIManager.prototype._createFromDescriptor = function(descriptor, parent, index) {\n    var control, controller;\n    control = this.createControlFromDescriptor(descriptor, parent, index);\n    if (descriptor.controller != null) {\n      controller = this.controllers[descriptor.controller];\n      control.controller = controller;\n      control.addComponent(controller);\n    }\n    return control;\n  };\n\n  UIManager.prototype.createLayoutFromDescriptor = function(descriptor, parent, index) {\n    return this._createFromDescriptor(descriptor, parent, index);\n  };\n\n  return UIManager;\n\n})();\n\nGraphics.width = $PARAMS.resolution.width;\n\nGraphics.height = $PARAMS.resolution.height;\n\nui.UiFactory = new UIManager();\n\nui.UIManager = ui.UiFactory;\n\n//# sourceMappingURL=data:application/json;base64,\n//# sourceURL=UIManager_103.js"
    },
    "summary": [
        "name",
        "type",
        "order"
    ]
}